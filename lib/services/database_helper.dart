import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import '../models/lesson.dart';
import '../models/question.dart';
import '../models/challenge.dart';
import '../models/progress.dart';
import '../models/game_score.dart';

class DatabaseHelper {
  static final DatabaseHelper instance = DatabaseHelper._init();
  static Database? _database;

  DatabaseHelper._init();

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDB('asia_green.db');
    return _database!;
  }

  Future<Database> _initDB(String filePath) async {
    final dbPath = await getDatabasesPath();
    final path = join(dbPath, filePath);

    return await openDatabase(
      path,
      version: 1,
      onCreate: _createDB,
    );
  }

  Future<void> _createDB(Database db, int version) async {
    // Lessons table
    await db.execute('''
      CREATE TABLE lessons (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        content TEXT NOT NULL,
        category TEXT NOT NULL,
        imagePath TEXT,
        audioPath TEXT,
        videoPath TEXT,
        orderIndex INTEGER NOT NULL
      )
    ''');

    // Questions table
    await db.execute('''
      CREATE TABLE questions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        lessonId INTEGER NOT NULL,
        question TEXT NOT NULL,
        options TEXT NOT NULL,
        correctAnswer INTEGER NOT NULL,
        explanation TEXT NOT NULL,
        FOREIGN KEY (lessonId) REFERENCES lessons (id)
      )
    ''');

    // Challenges table
    await db.execute('''
      CREATE TABLE challenges (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT NOT NULL,
        points INTEGER NOT NULL,
        icon TEXT NOT NULL,
        isCompleted INTEGER NOT NULL DEFAULT 0
      )
    ''');

    // Progress table
    await db.execute('''
      CREATE TABLE progress (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        lessonId INTEGER NOT NULL,
        score INTEGER NOT NULL,
        completedAt TEXT NOT NULL,
        FOREIGN KEY (lessonId) REFERENCES lessons (id)
      )
    ''');

    // Game scores table
    await db.execute('''
      CREATE TABLE game_scores (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        gameName TEXT NOT NULL,
        score INTEGER NOT NULL,
        playedAt TEXT NOT NULL
      )
    ''');

    // Insert seed data
    await _seedData(db);
  }

  Future<void> _seedData(Database db) async {
    // Seed Lessons
    await db.insert('lessons', {
      'title': '√î nhi·ªÖm n∆∞·ªõc & X·ª≠ l√Ω n∆∞·ªõc th·∫£i',
      'content': '''N∆∞·ªõc l√† ngu·ªìn t√†i nguy√™n qu√Ω gi√° nh·∫•t c·ªßa con ng∆∞·ªùi. Tuy nhi√™n, √¥ nhi·ªÖm n∆∞·ªõc ƒëang tr·ªü th√†nh v·∫•n ƒë·ªÅ nghi√™m tr·ªçng to√†n c·∫ßu.

**Nguy√™n nh√¢n ch√≠nh:**
‚Ä¢ N∆∞·ªõc th·∫£i c√¥ng nghi·ªáp ch∆∞a qua x·ª≠ l√Ω
‚Ä¢ R√°c th·∫£i sinh ho·∫°t ƒë·ªï ra s√¥ng, h·ªì
‚Ä¢ S·ª≠ d·ª•ng h√≥a ch·∫•t trong n√¥ng nghi·ªáp
‚Ä¢ R√≤ r·ªâ d·∫ßu m·ªè v√† h√≥a ch·∫•t ƒë·ªôc h·∫°i

**H·∫≠u qu·∫£:**
‚Ä¢ Ngu·ªìn n∆∞·ªõc u·ªëng b·ªã √¥ nhi·ªÖm
‚Ä¢ H·ªá sinh th√°i d∆∞·ªõi n∆∞·ªõc b·ªã ph√° h·ªßy
‚Ä¢ ·∫¢nh h∆∞·ªüng ƒë·∫øn s·ª©c kh·ªèe con ng∆∞·ªùi
‚Ä¢ Thi·ªát h·∫°i kinh t·∫ø l·ªõn

**Gi·∫£i ph√°p:**
‚Ä¢ X√¢y d·ª±ng h·ªá th·ªëng x·ª≠ l√Ω n∆∞·ªõc th·∫£i hi·ªán ƒë·∫°i
‚Ä¢ Kh√¥ng x·∫£ r√°c xu·ªëng ngu·ªìn n∆∞·ªõc
‚Ä¢ S·ª≠ d·ª•ng h√≥a ch·∫•t th√¢n thi·ªán m√¥i tr∆∞·ªùng
‚Ä¢ T√°i ch·∫ø v√† t√°i s·ª≠ d·ª•ng n∆∞·ªõc''',
      'category': 'water',
      'imagePath': 'assets/images/water_pollution.png',
      'orderIndex': 1,
    });

    await db.insert('lessons', {
      'title': 'T√°c h·∫°i c·ªßa r√°c th·∫£i nh·ª±a',
      'content': '''R√°c th·∫£i nh·ª±a l√† m·ªôt trong nh·ªØng v·∫•n ƒë·ªÅ m√¥i tr∆∞·ªùng l·ªõn nh·∫•t hi·ªán nay. M·ªói nƒÉm c√≥ h√†ng tri·ªáu t·∫•n nh·ª±a th·∫£i ra ƒë·∫°i d∆∞∆°ng.

**T√°c h·∫°i:**
‚Ä¢ Ph√¢n h·ªßy m·∫•t h√†ng trƒÉm nƒÉm
‚Ä¢ G√¢y h·∫°i cho sinh v·∫≠t bi·ªÉn
‚Ä¢ Ph√°t sinh ƒë·ªôc t·ªë khi ph√¢n h·ªßy
‚Ä¢ √î nhi·ªÖm ƒë·∫•t v√† n∆∞·ªõc

**Vi nh·ª±a - m·ªëi ƒëe d·ªça v√¥ h√¨nh:**
Vi nh·ª±a l√† nh·ªØng m·∫£nh nh·ª±a nh·ªè h∆°n 5mm, c√≥ th·ªÉ x√¢m nh·∫≠p v√†o c∆° th·ªÉ con ng∆∞·ªùi qua th·ª©c ƒÉn v√† n∆∞·ªõc u·ªëng.

**Gi·∫£i ph√°p:**
‚Ä¢ Gi·∫£m s·ª≠ d·ª•ng nh·ª±a d√πng m·ªôt l·∫ßn
‚Ä¢ T√°i ch·∫ø nh·ª±a ƒë√∫ng c√°ch
‚Ä¢ S·ª≠ d·ª•ng t√∫i v·∫£i, chai l·ªç t√°i s·ª≠ d·ª•ng
‚Ä¢ Tham gia c√°c chi·∫øn d·ªãch d·ªçn r√°c''',
      'category': 'waste',
      'imagePath': 'assets/images/plastic_waste.png',
      'orderIndex': 2,
    });

    await db.insert('lessons', {
      'title': 'Ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng',
      'content': '''Ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng kh√¥ng ch·ªâ gi√∫p gi·∫£m chi ph√≠ m√† c√≤n b·∫£o v·ªá m√¥i tr∆∞·ªùng v√† ch·ªëng bi·∫øn ƒë·ªïi kh√≠ h·∫≠u.

**T·∫°i sao c·∫ßn ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng?**
‚Ä¢ Gi·∫£m ph√°t th·∫£i kh√≠ nh√† k√≠nh
‚Ä¢ B·∫£o t·ªìn t√†i nguy√™n thi√™n nhi√™n
‚Ä¢ Ti·∫øt ki·ªám chi ph√≠ sinh ho·∫°t
‚Ä¢ Gi·∫£m √¥ nhi·ªÖm kh√¥ng kh√≠

**C√°ch ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng:**

T·∫°i nh√†:
‚Ä¢ T·∫Øt ƒë√®n khi kh√¥ng s·ª≠ d·ª•ng
‚Ä¢ R√∫t ph√≠ch c·∫Øm thi·∫øt b·ªã ƒëi·ªán
‚Ä¢ S·ª≠ d·ª•ng b√≥ng ƒë√®n LED
‚Ä¢ ƒêi·ªÅu h√≤a ·ªü nhi·ªát ƒë·ªô h·ª£p l√Ω (25-26¬∞C)

T·∫°i c√¥ng ty:
‚Ä¢ T·ªëi ∆∞u h√≥a h·ªá th·ªëng chi·∫øu s√°ng
‚Ä¢ B·∫£o tr√¨ m√°y m√≥c ƒë·ªãnh k·ª≥
‚Ä¢ S·ª≠ d·ª•ng nƒÉng l∆∞·ª£ng t√°i t·∫°o
‚Ä¢ ƒê√†o t·∫°o nh√¢n vi√™n ti·∫øt ki·ªám ƒëi·ªán''',
      'category': 'energy',
      'imagePath': 'assets/images/energy_save.png',
      'orderIndex': 3,
    });

    await db.insert('lessons', {
      'title': 'Bi·∫øn ƒë·ªïi kh√≠ h·∫≠u',
      'content': '''Bi·∫øn ƒë·ªïi kh√≠ h·∫≠u l√† th√°ch th·ª©c l·ªõn nh·∫•t m√† nh√¢n lo·∫°i ƒëang ph·∫£i ƒë·ªëi m·∫∑t.

**Nguy√™n nh√¢n:**
‚Ä¢ ƒê·ªët nhi√™n li·ªáu h√≥a th·∫°ch (than, d·∫ßu, kh√≠ ƒë·ªët)
‚Ä¢ Ph√° r·ª´ng v√† m·∫•t r·ª´ng
‚Ä¢ Ho·∫°t ƒë·ªông n√¥ng nghi·ªáp th·∫£i kh√≠ nh√† k√≠nh
‚Ä¢ S·∫£n xu·∫•t c√¥ng nghi·ªáp

**H·∫≠u qu·∫£:**
‚Ä¢ Nhi·ªát ƒë·ªô tr√°i ƒë·∫•t tƒÉng
‚Ä¢ BƒÉng tan, m·ª±c n∆∞·ªõc bi·ªÉn d√¢ng
‚Ä¢ Thi√™n tai c·ª±c ƒëoan tƒÉng
‚Ä¢ H·∫°n h√°n, l≈© l·ª•t nghi√™m tr·ªçng

**H√†nh ƒë·ªông c√° nh√¢n:**
‚Ä¢ Gi·∫£m ti√™u th·ª• nƒÉng l∆∞·ª£ng
‚Ä¢ ƒêi xe ƒë·∫°p, giao th√¥ng c√¥ng c·ªông
‚Ä¢ ƒÇn nhi·ªÅu th·ª±c ph·∫©m th·ª±c v·∫≠t
‚Ä¢ Tr·ªìng c√¢y v√† b·∫£o v·ªá r·ª´ng
‚Ä¢ Gi·∫£m thi·ªÉu r√°c th·∫£i''',
      'category': 'climate',
      'imagePath': 'assets/images/climate_change.png',
      'orderIndex': 4,
    });

    await db.insert('lessons', {
      'title': 'C√¢y xanh v√† H·ªá sinh th√°i',
      'content': '''C√¢y xanh v√† r·ª´ng l√† "l√° ph·ªïi" c·ªßa Tr√°i ƒê·∫•t, ƒë√≥ng vai tr√≤ quan tr·ªçng trong vi·ªác duy tr√¨ s·ª± s·ªëng.

**Vai tr√≤ c·ªßa c√¢y xanh:**
‚Ä¢ S·∫£n xu·∫•t oxy, h·∫•p th·ª• CO2
‚Ä¢ ƒêi·ªÅu h√≤a nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m
‚Ä¢ L·ªçc kh√¥ng kh√≠, gi·∫£m √¥ nhi·ªÖm
‚Ä¢ B·∫£o v·ªá ƒë·∫•t, ch·ªëng x√≥i m√≤n
‚Ä¢ Cung c·∫•p n∆°i s·ªëng cho ƒë·ªông v·∫≠t

**H·ªá sinh th√°i:**
H·ªá sinh th√°i l√† m·∫°ng l∆∞·ªõi s·ª± s·ªëng ph·ª©c t·∫°p, m·ªói lo√†i ƒë·ªÅu c√≥ vai tr√≤ ri√™ng. Khi m·ªôt lo√†i bi·∫øn m·∫•t, to√†n b·ªô h·ªá th·ªëng b·ªã ·∫£nh h∆∞·ªüng.

**B·∫£o v·ªá ƒëa d·∫°ng sinh h·ªçc:**
‚Ä¢ Kh√¥ng sƒÉn b·∫Øt, bu√¥n b√°n ƒë·ªông v·∫≠t hoang d√£
‚Ä¢ Tr·ªìng c√¢y b·∫£n ƒë·ªãa
‚Ä¢ B·∫£o v·ªá c√°c khu b·∫£o t·ªìn
‚Ä¢ Gi·∫£m s·ª≠ d·ª•ng h√≥a ch·∫•t ƒë·ªôc h·∫°i
‚Ä¢ Tham gia c√°c ch∆∞∆°ng tr√¨nh b·∫£o v·ªá m√¥i tr∆∞·ªùng''',
      'category': 'nature',
      'imagePath': 'assets/images/green_nature.png',
      'orderIndex': 5,
    });

    // Additional Water lessons
    await db.insert('lessons', {
      'title': 'Ti·∫øt ki·ªám n∆∞·ªõc h√†ng ng√†y',
      'content': '''N∆∞·ªõc ng·ªçt ch·ªâ chi·∫øm 2.5% t·ªïng l∆∞·ª£ng n∆∞·ªõc tr√™n Tr√°i ƒê·∫•t. Ti·∫øt ki·ªám n∆∞·ªõc l√† tr√°ch nhi·ªám c·ªßa m·ªói ng∆∞·ªùi.

**T·∫°i sao ph·∫£i ti·∫øt ki·ªám n∆∞·ªõc?**
‚Ä¢ Ngu·ªìn n∆∞·ªõc ng·ªçt h·∫°n ch·∫ø
‚Ä¢ D√¢n s·ªë tƒÉng, nhu c·∫ßu n∆∞·ªõc tƒÉng
‚Ä¢ Bi·∫øn ƒë·ªïi kh√≠ h·∫≠u l√†m khan hi·∫øm n∆∞·ªõc
‚Ä¢ Ti·∫øt ki·ªám chi ph√≠ sinh ho·∫°t

**C√°ch ti·∫øt ki·ªám n∆∞·ªõc:**

Trong nh√† t·∫Øm:
‚Ä¢ T·∫Øm v√≤i hoa sen thay v√¨ b·ªìn
‚Ä¢ Gi·∫£m th·ªùi gian t·∫Øm (5-7 ph√∫t)
‚Ä¢ S·ª≠a v√≤i n∆∞·ªõc r√≤ r·ªâ ngay
‚Ä¢ ƒê√≥ng v√≤i khi x√† ph√≤ng

Trong b·∫øp:
‚Ä¢ R·ª≠a rau c·ªß trong ch·∫≠u, kh√¥ng d∆∞·ªõi v√≤i
‚Ä¢ S·ª≠ d·ª•ng m√°y r·ª≠a b√°t ƒë·∫ßy t·∫£i
‚Ä¢ T√°i s·ª≠ d·ª•ng n∆∞·ªõc vo g·∫°o
‚Ä¢ Thu n∆∞·ªõc m∆∞a ƒë·ªÉ t∆∞·ªõi c√¢y''',
      'category': 'water',
      'imagePath': 'assets/images/save_water.png',
      'orderIndex': 6,
    });

    await db.insert('lessons', {
      'title': '√î nhi·ªÖm ngu·ªìn n∆∞·ªõc ng·∫ßm',
      'content': '''N∆∞·ªõc ng·∫ßm l√† ngu·ªìn n∆∞·ªõc u·ªëng quan tr·ªçng cho h√†ng t·ª∑ ng∆∞·ªùi, nh∆∞ng ƒëang b·ªã ƒëe d·ªça nghi√™m tr·ªçng.

**Nguy√™n nh√¢n √¥ nhi·ªÖm:**
‚Ä¢ R√≤ r·ªâ b·ªÉ ph·ªët, h·∫ßm c·∫ßu
‚Ä¢ H√≥a ch·∫•t n√¥ng nghi·ªáp th·∫•m xu·ªëng
‚Ä¢ B√£i r√°c kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng c√°ch
‚Ä¢ Ch√¥n l·∫•p ch·∫•t th·∫£i c√¥ng nghi·ªáp
‚Ä¢ Khai th√°c qu√° m·ª©c l√†m nhi·ªÖm m·∫∑n

**H·∫≠u qu·∫£:**
‚Ä¢ N∆∞·ªõc u·ªëng kh√¥ng an to√†n
‚Ä¢ G√¢y b·ªánh cho con ng∆∞·ªùi (ti√™u ch·∫£y, nhi·ªÖm ƒë·ªôc)
‚Ä¢ Chi ph√≠ x·ª≠ l√Ω n∆∞·ªõc tƒÉng cao
‚Ä¢ Kh√≥ khƒÉn trong cung c·∫•p n∆∞·ªõc s·∫°ch

**B·∫£o v·ªá n∆∞·ªõc ng·∫ßm:**
‚Ä¢ X√¢y d·ª±ng b·ªÉ ph·ªët ƒë√∫ng quy c√°ch
‚Ä¢ Gi·∫£m s·ª≠ d·ª•ng h√≥a ch·∫•t
‚Ä¢ X·ª≠ l√Ω r√°c th·∫£i ƒë√∫ng c√°ch
‚Ä¢ Kh√¥ng ch√¥n l·∫•p ch·∫•t th·∫£i nguy h·∫°i
‚Ä¢ Tr·ªìng c√¢y xanh ƒë·ªÉ b·∫£o v·ªá t·∫ßng n∆∞·ªõc''',
      'category': 'water',
      'imagePath': 'assets/images/groundwater.png',
      'orderIndex': 7,
    });

    // Additional Waste lessons
    await db.insert('lessons', {
      'title': 'Ph√¢n lo·∫°i v√† t√°i ch·∫ø r√°c th·∫£i',
      'content': '''Ph√¢n lo·∫°i r√°c l√† b∆∞·ªõc ƒë·∫ßu ti√™n ƒë·ªÉ gi·∫£m thi·ªÉu √¥ nhi·ªÖm v√† t·ªëi ∆∞u h√≥a t√°i ch·∫ø.

**C√°c lo·∫°i r√°c:**

‚ôªÔ∏è R√°c t√°i ch·∫ø:
‚Ä¢ Gi·∫•y, b√¨a carton
‚Ä¢ Chai nh·ª±a, lon kim lo·∫°i
‚Ä¢ Chai l·ªç th·ªßy tinh
‚Ä¢ ƒê·ªì ƒëi·ªán t·ª≠ c≈©

üçÉ R√°c h·ªØu c∆°:
‚Ä¢ Th·ª©c ƒÉn th·ª´a, v·ªè tr√°i c√¢y
‚Ä¢ L√° c√¢y, c√†nh c√¢y
‚Ä¢ C√≥ th·ªÉ l√†m ph√¢n compost

‚ö†Ô∏è R√°c nguy h·∫°i:
‚Ä¢ Pin, b√≥ng ƒë√®n
‚Ä¢ Thu·ªëc tr·ª´ s√¢u, h√≥a ch·∫•t
‚Ä¢ D·∫ßu nh·ªõt, s∆°n
‚Ä¢ C·∫ßn x·ª≠ l√Ω ƒë·∫∑c bi·ªát

üóëÔ∏è R√°c th√¥ng th∆∞·ªùng:
‚Ä¢ Gi·∫•y b·∫©n, khƒÉn gi·∫•y ƒë√£ d√πng
‚Ä¢ Bao b√¨ kh√¥ng t√°i ch·∫ø ƒë∆∞·ª£c
‚Ä¢ ƒê∆∞a ra b√£i r√°c t·∫≠p trung''',
      'category': 'waste',
      'imagePath': 'assets/images/recycle.png',
      'orderIndex': 8,
    });

    await db.insert('lessons', {
      'title': 'S·ªëng xanh - Zero Waste',
      'content': '''Phong tr√†o Zero Waste (kh√¥ng r√°c th·∫£i) l√† l·ªëi s·ªëng gi·∫£m thi·ªÉu t·ªëi ƒëa r√°c th·∫£i ra m√¥i tr∆∞·ªùng.

**Nguy√™n t·∫Øc 5R:**

1. Refuse (T·ª´ ch·ªëi):
‚Ä¢ T·ª´ ch·ªëi t√∫i ni l√¥ng
‚Ä¢ Kh√¥ng nh·∫≠n qu√† t·∫∑ng kh√¥ng c·∫ßn thi·∫øt
‚Ä¢ T·ª´ ch·ªëi ·ªëng h√∫t, ƒë·ªì d√πng nh·ª±a m·ªôt l·∫ßn

2. Reduce (Gi·∫£m thi·ªÉu):
‚Ä¢ Mua ch·ªâ nh·ªØng g√¨ c·∫ßn thi·∫øt
‚Ä¢ Ch·ªçn s·∫£n ph·∫©m √≠t bao b√¨
‚Ä¢ Gi·∫£m ti√™u d√πng qu√° m·ª©c

3. Reuse (T√°i s·ª≠ d·ª•ng):
‚Ä¢ D√πng t√∫i v·∫£i, h·ªôp c∆°m
‚Ä¢ S·ª≠a ch·ªØa thay v√¨ v·ª©t b·ªè
‚Ä¢ Cho t·∫∑ng ƒë·ªì c≈© c√≤n d√πng ƒë∆∞·ª£c

4. Recycle (T√°i ch·∫ø):
‚Ä¢ Ph√¢n lo·∫°i r√°c ƒë√∫ng c√°ch
‚Ä¢ T√°i ch·∫ø gi·∫•y, nh·ª±a, kim lo·∫°i

5. Rot (·ª¶ ph√¢n):
‚Ä¢ ·ª¶ r√°c h·ªØu c∆° th√†nh ph√¢n b√≥n
‚Ä¢ T·∫°o compost cho c√¢y tr·ªìng''',
      'category': 'waste',
      'imagePath': 'assets/images/zero_waste.png',
      'orderIndex': 9,
    });

    // Additional Energy lessons
    await db.insert('lessons', {
      'title': 'NƒÉng l∆∞·ª£ng t√°i t·∫°o',
      'content': '''NƒÉng l∆∞·ª£ng t√°i t·∫°o l√† gi·∫£i ph√°p b·ªÅn v·ªØng thay th·∫ø nhi√™n li·ªáu h√≥a th·∫°ch.

**C√°c lo·∫°i nƒÉng l∆∞·ª£ng t√°i t·∫°o:**

‚òÄÔ∏è NƒÉng l∆∞·ª£ng m·∫∑t tr·ªùi:
‚Ä¢ T·∫•m pin m·∫∑t tr·ªùi
‚Ä¢ S·∫°ch, v√¥ t·∫≠n
‚Ä¢ Chi ph√≠ ban ƒë·∫ßu cao, ti·∫øt ki·ªám l√¢u d√†i

üí® NƒÉng l∆∞·ª£ng gi√≥:
‚Ä¢ Tuabin gi√≥
‚Ä¢ Hi·ªáu qu·∫£ ·ªü v√πng gi√≥ m·∫°nh
‚Ä¢ Kh√¥ng g√¢y √¥ nhi·ªÖm

üíß NƒÉng l∆∞·ª£ng th·ªßy ƒëi·ªán:
‚Ä¢ T·ª´ d√≤ng ch·∫£y s√¥ng, ƒë·∫≠p
‚Ä¢ ·ªîn ƒë·ªãnh, c√¥ng su·∫•t l·ªõn
‚Ä¢ C·∫ßn ƒë√°nh gi√° t√°c ƒë·ªông m√¥i tr∆∞·ªùng

üåä NƒÉng l∆∞·ª£ng s√≥ng bi·ªÉn:
‚Ä¢ C√¥ng ngh·ªá ƒëang ph√°t tri·ªÉn
‚Ä¢ Ti·ªÅm nƒÉng l·ªõn ·ªü Vi·ªát Nam

**L·ª£i √≠ch:**
‚Ä¢ Gi·∫£m ph√°t th·∫£i kh√≠ nh√† k√≠nh
‚Ä¢ Kh√¥ng c·∫°n ki·ªát
‚Ä¢ T·∫°o vi·ªác l√†m xanh
‚Ä¢ ƒê·ªôc l·∫≠p nƒÉng l∆∞·ª£ng''',
      'category': 'energy',
      'imagePath': 'assets/images/renewable.png',
      'orderIndex': 10,
    });

    await db.insert('lessons', {
      'title': 'Hi·ªáu qu·∫£ nƒÉng l∆∞·ª£ng t√≤a nh√†',
      'content': '''T√≤a nh√† ti√™u th·ª• 40% nƒÉng l∆∞·ª£ng to√†n c·∫ßu. Thi·∫øt k·∫ø v√† v·∫≠n h√†nh hi·ªáu qu·∫£ c√≥ th·ªÉ ti·∫øt ki·ªám ƒë√°ng k·ªÉ.

**Thi·∫øt k·∫ø t√≤a nh√† xanh:**

V·ªÅ ki·∫øn tr√∫c:
‚Ä¢ ƒê·ªãnh h∆∞·ªõng t√≤a nh√† h·ª£p l√Ω
‚Ä¢ C·ª≠a s·ªï l·ªõn t·∫≠n d·ª•ng √°nh s√°ng t·ª± nhi√™n
‚Ä¢ M√°i che, m√°i xanh ch·ªëng n√≥ng
‚Ä¢ C√°ch nhi·ªát t∆∞·ªùng, m√°i t·ªët

H·ªá th·ªëng ƒëi·ªán:
‚Ä¢ ƒê√®n LED, c·∫£m bi·∫øn chuy·ªÉn ƒë·ªông
‚Ä¢ ƒêi·ªÅu h√≤a inverter hi·ªáu su·∫•t cao
‚Ä¢ Thi·∫øt b·ªã ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng (Energy Star)
‚Ä¢ H·ªá th·ªëng qu·∫£n l√Ω t√≤a nh√† th√¥ng minh (BMS)

NƒÉng l∆∞·ª£ng t√°i t·∫°o:
‚Ä¢ L·∫Øp ƒë·∫∑t pin m·∫∑t tr·ªùi
‚Ä¢ S·ª≠ d·ª•ng m√°y n∆∞·ªõc n√≥ng nƒÉng l∆∞·ª£ng m·∫∑t tr·ªùi
‚Ä¢ Thu nƒÉng l∆∞·ª£ng gi√≥ n·∫øu c√≥ ƒëi·ªÅu ki·ªán

**Ch·ª©ng nh·∫≠n xanh:**
‚Ä¢ LEED (H·ªá th·ªëng ƒë√°nh gi√° t√≤a nh√† xanh)
‚Ä¢ LOTUS (Ti√™u chu·∫©n Vi·ªát Nam)
‚Ä¢ Ti·∫øt ki·ªám 20-50% nƒÉng l∆∞·ª£ng''',
      'category': 'energy',
      'imagePath': 'assets/images/green_building.png',
      'orderIndex': 11,
    });

    // Additional Climate lessons
    await db.insert('lessons', {
      'title': 'Kh√≠ nh√† k√≠nh v√† Hi·ªáu ·ª©ng nh√† k√≠nh',
      'content': '''Hi·ªáu ·ª©ng nh√† k√≠nh l√† hi·ªán t∆∞·ª£ng t·ª± nhi√™n, nh∆∞ng ho·∫°t ƒë·ªông con ng∆∞·ªùi ƒëang l√†m n√≥ qu√° m·ª©c.

**Kh√≠ nh√† k√≠nh ch√≠nh:**

CO2 (Carbon dioxide):
‚Ä¢ T·ª´ ƒë·ªët nhi√™n li·ªáu h√≥a th·∫°ch
‚Ä¢ Ph√° r·ª´ng gi·∫£m h·∫•p th·ª• CO2
‚Ä¢ Chi·∫øm 76% kh√≠ nh√† k√≠nh

CH4 (Methane):
‚Ä¢ T·ª´ chƒÉn nu√¥i (b√≤, tr√¢u)
‚Ä¢ Ru·ªông l√∫a n∆∞·ªõc
‚Ä¢ B√£i r√°c
‚Ä¢ M·∫°nh g·∫•p 25 l·∫ßn CO2

N2O (Nitrous oxide):
‚Ä¢ Ph√¢n b√≥n h√≥a h·ªçc
‚Ä¢ C√¥ng nghi·ªáp
‚Ä¢ M·∫°nh g·∫•p 298 l·∫ßn CO2

**Hi·ªáu ·ª©ng nh√† k√≠nh:**
Kh√≠ nh√† k√≠nh gi·ªØ nhi·ªát nh∆∞ m√°i k√≠nh, l√†m Tr√°i ƒê·∫•t ·∫•m l√™n. Khi qu√° nhi·ªÅu, nhi·ªát ƒë·ªô tƒÉng nguy hi·ªÉm.

**Gi·∫£m ph√°t th·∫£i:**
‚Ä¢ Ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng
‚Ä¢ S·ª≠ d·ª•ng nƒÉng l∆∞·ª£ng t√°i t·∫°o
‚Ä¢ ƒÇn √≠t th·ªãt, nhi·ªÅu th·ª±c v·∫≠t
‚Ä¢ Tr·ªìng c√¢y, b·∫£o v·ªá r·ª´ng''',
      'category': 'climate',
      'imagePath': 'assets/images/greenhouse.png',
      'orderIndex': 12,
    });

    await db.insert('lessons', {
      'title': 'Th√≠ch ·ª©ng v·ªõi bi·∫øn ƒë·ªïi kh√≠ h·∫≠u',
      'content': '''Trong khi gi·∫£m ph√°t th·∫£i, ch√∫ng ta c≈©ng c·∫ßn th√≠ch ·ª©ng v·ªõi bi·∫øn ƒë·ªïi kh√≠ h·∫≠u ƒë√£ x·∫£y ra.

**T√°c ƒë·ªông ƒëang di·ªÖn ra:**

V·ªÅ n∆∞·ªõc:
‚Ä¢ L≈© l·ª•t nghi√™m tr·ªçng h∆°n
‚Ä¢ H·∫°n h√°n k√©o d√†i
‚Ä¢ M·ª±c n∆∞·ªõc bi·ªÉn d√¢ng
‚Ä¢ X√¢m nh·∫≠p m·∫∑n

V·ªÅ n√¥ng nghi·ªáp:
‚Ä¢ M√πa m√†ng th·∫•t thu
‚Ä¢ D·ªãch b·ªánh c√¢y tr·ªìng, v·∫≠t nu√¥i
‚Ä¢ Thay ƒë·ªïi l·ªãch v·ª• m√πa

V·ªÅ s·ª©c kh·ªèe:
‚Ä¢ N·∫Øng n√≥ng gay g·∫Øt
‚Ä¢ D·ªãch b·ªánh l√¢y lan
‚Ä¢ Thi·∫øu n∆∞·ªõc s·∫°ch

**Gi·∫£i ph√°p th√≠ch ·ª©ng:**

C·ªông ƒë·ªìng:
‚Ä¢ X√¢y d·ª±ng h·ªá th·ªëng t∆∞·ªõi ti·∫øt ki·ªám n∆∞·ªõc
‚Ä¢ Tr·ªìng c√¢y ch·ªëng h·∫°n, ch·ªãu m·∫∑n
‚Ä¢ ƒê√™ ƒëi·ªÅu ch·ªëng l≈©, s√≥ng bi·ªÉn
‚Ä¢ H·ªá th·ªëng c·∫£nh b√°o s·ªõm thi√™n tai

C√° nh√¢n:
‚Ä¢ D·ª± tr·ªØ n∆∞·ªõc, l∆∞∆°ng th·ª±c
‚Ä¢ B·∫£o hi·ªÉm r·ªßi ro thi√™n tai
‚Ä¢ N√¢ng cao nh√† ·ªü v√πng ng·∫≠p l·ª•t
‚Ä¢ H·ªçc k·ªπ nƒÉng s∆° c·ª©u, ·ª©ng ph√≥''',
      'category': 'climate',
      'imagePath': 'assets/images/adaptation.png',
      'orderIndex': 13,
    });

    // Additional Nature lessons
    await db.insert('lessons', {
      'title': 'ƒêa d·∫°ng sinh h·ªçc',
      'content': '''ƒêa d·∫°ng sinh h·ªçc l√† s·ª± phong ph√∫ c·ªßa c√°c lo√†i ƒë·ªông th·ª±c v·∫≠t tr√™n Tr√°i ƒê·∫•t.

**T·∫ßm quan tr·ªçng:**
‚Ä¢ Cung c·∫•p th·ª©c ƒÉn, thu·ªëc men
‚Ä¢ Duy tr√¨ h·ªá sinh th√°i ·ªïn ƒë·ªãnh
‚Ä¢ ƒêi·ªÅu h√≤a kh√≠ h·∫≠u
‚Ä¢ Gi√° tr·ªã vƒÉn h√≥a, tinh th·∫ßn
‚Ä¢ Du l·ªãch sinh th√°i

**Nguy c∆° tuy·ªát ch·ªßng:**

Nguy√™n nh√¢n:
‚Ä¢ M·∫•t m√¥i tr∆∞·ªùng s·ªëng (ph√° r·ª´ng)
‚Ä¢ SƒÉn b·∫Øt, bu√¥n b√°n b·∫•t h·ª£p ph√°p
‚Ä¢ √î nhi·ªÖm m√¥i tr∆∞·ªùng
‚Ä¢ Bi·∫øn ƒë·ªïi kh√≠ h·∫≠u
‚Ä¢ Lo√†i ngo·∫°i lai x√¢m l·∫•n

Con s·ªë ƒë√°ng b√°o ƒë·ªông:
‚Ä¢ 1 tri·ªáu lo√†i c√≥ nguy c∆° tuy·ªát ch·ªßng
‚Ä¢ 75% di·ªán t√≠ch ƒë·∫•t b·ªã suy tho√°i
‚Ä¢ 66% ƒë·∫°i d∆∞∆°ng b·ªã t√°c ƒë·ªông nghi√™m tr·ªçng

**B·∫£o v·ªá ƒëa d·∫°ng sinh h·ªçc:**
‚Ä¢ Th√†nh l·∫≠p khu b·∫£o t·ªìn
‚Ä¢ Ch·ªëng sƒÉn b·∫Øt tr√°i ph√©p
‚Ä¢ Ph·ª•c h·ªìi m√¥i tr∆∞·ªùng s·ªëng
‚Ä¢ Nh√¢n gi·ªëng lo√†i qu√Ω hi·∫øm
‚Ä¢ Gi√°o d·ª•c c·ªông ƒë·ªìng''',
      'category': 'nature',
      'imagePath': 'assets/images/biodiversity.png',
      'orderIndex': 14,
    });

    await db.insert('lessons', {
      'title': 'B·∫£o v·ªá r·ª´ng v√† tr·ªìng r·ª´ng',
      'content': '''R·ª´ng l√† h·ªá sinh th√°i quan tr·ªçng nh·∫•t tr√™n c·∫°n, nh∆∞ng ƒëang b·ªã ph√° h·ªßy v·ªõi t·ªëc ƒë·ªô b√°o ƒë·ªông.

**Vai tr√≤ c·ªßa r·ª´ng:**

V·ªõi kh√≠ h·∫≠u:
‚Ä¢ H·∫•p th·ª• CO2, gi·∫£m bi·∫øn ƒë·ªïi kh√≠ h·∫≠u
‚Ä¢ ƒêi·ªÅu h√≤a nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m
‚Ä¢ T·∫°o m∆∞a

V·ªõi m√¥i tr∆∞·ªùng:
‚Ä¢ Ch·ªëng x√≥i m√≤n ƒë·∫•t
‚Ä¢ B·∫£o v·ªá ngu·ªìn n∆∞·ªõc
‚Ä¢ L·ªçc kh√¥ng kh√≠
‚Ä¢ Gi·∫£m thi√™n tai

V·ªõi con ng∆∞·ªùi:
‚Ä¢ Cung c·∫•p g·ªó, l√¢m s·∫£n
‚Ä¢ Ngu·ªìn thu·ªëc qu√Ω
‚Ä¢ Du l·ªãch sinh th√°i
‚Ä¢ L√† nh√† c·ªßa 80% lo√†i tr√™n c·∫°n

**Th·ª±c tr·∫°ng:**
‚Ä¢ 10 tri·ªáu ha r·ª´ng m·∫•t m·ªói nƒÉm (b·∫±ng di·ªán t√≠ch H√†n Qu·ªëc)
‚Ä¢ Amazon - "l√° ph·ªïi xanh" ƒëang b·ªã ph√° h·ªßy
‚Ä¢ Vi·ªát Nam: ƒë·ªô che ph·ªß 42%, c·∫ßn tƒÉng l√™n 45%

**H√†nh ƒë·ªông:**
‚Ä¢ Kh√¥ng s·ª≠ d·ª•ng g·ªó l·∫≠u
‚Ä¢ Tr·ªìng c√¢y g√¢y r·ª´ng
‚Ä¢ Tham gia c√°c ch∆∞∆°ng tr√¨nh t√¨nh nguy·ªán
‚Ä¢ Gi·∫£m ti√™u th·ª• gi·∫•y
‚Ä¢ ·ª¶ng h·ªô c√°c t·ªï ch·ª©c b·∫£o v·ªá r·ª´ng''',
      'category': 'nature',
      'imagePath': 'assets/images/forest.png',
      'orderIndex': 15,
    });

    // Seed Questions for Lesson 1
    await db.insert('questions', {
      'lessonId': 1,
      'question': 'Nguy√™n nh√¢n ch√≠nh g√¢y √¥ nhi·ªÖm n∆∞·ªõc l√† g√¨?',
      'options': 'N∆∞·ªõc m∆∞a|||N∆∞·ªõc th·∫£i c√¥ng nghi·ªáp ch∆∞a qua x·ª≠ l√Ω|||N∆∞·ªõc bi·ªÉn|||N∆∞·ªõc ng·∫ßm',
      'correctAnswer': 1,
      'explanation': 'N∆∞·ªõc th·∫£i c√¥ng nghi·ªáp ch∆∞a qua x·ª≠ l√Ω l√† m·ªôt trong nh·ªØng nguy√™n nh√¢n ch√≠nh g√¢y √¥ nhi·ªÖm ngu·ªìn n∆∞·ªõc.',
    });

    await db.insert('questions', {
      'lessonId': 1,
      'question': '√î nhi·ªÖm n∆∞·ªõc ·∫£nh h∆∞·ªüng ƒë·∫øn ƒëi·ªÅu g√¨?',
      'options': 'Ch·ªâ con ng∆∞·ªùi|||Ch·ªâ ƒë·ªông v·∫≠t|||To√†n b·ªô h·ªá sinh th√°i|||Kh√¥ng ·∫£nh h∆∞·ªüng g√¨',
      'correctAnswer': 2,
      'explanation': '√î nhi·ªÖm n∆∞·ªõc ·∫£nh h∆∞·ªüng ƒë·∫øn to√†n b·ªô h·ªá sinh th√°i, t·ª´ con ng∆∞·ªùi ƒë·∫øn ƒë·ªông th·ª±c v·∫≠t.',
    });

    // Seed Questions for Lesson 2
    await db.insert('questions', {
      'lessonId': 2,
      'question': 'Nh·ª±a m·∫•t bao l√¢u ƒë·ªÉ ph√¢n h·ªßy ho√†n to√†n?',
      'options': '1-2 nƒÉm|||10-20 nƒÉm|||50-100 nƒÉm|||H√†ng trƒÉm nƒÉm',
      'correctAnswer': 3,
      'explanation': 'Nh·ª±a c√≥ th·ªÉ m·∫•t h√†ng trƒÉm nƒÉm m·ªõi ph√¢n h·ªßy ho√†n to√†n, g√¢y √¥ nhi·ªÖm m√¥i tr∆∞·ªùng l√¢u d√†i.',
    });

    await db.insert('questions', {
      'lessonId': 2,
      'question': 'Gi·∫£i ph√°p n√†o gi√∫p gi·∫£m r√°c th·∫£i nh·ª±a?',
      'options': 'V·ª©t nh·ª±a b·ª´a b√£i|||S·ª≠ d·ª•ng t√∫i v·∫£i t√°i s·ª≠ d·ª•ng|||ƒê·ªët nh·ª±a|||Ch√¥n nh·ª±a',
      'correctAnswer': 1,
      'explanation': 'S·ª≠ d·ª•ng t√∫i v·∫£i v√† c√°c s·∫£n ph·∫©m t√°i s·ª≠ d·ª•ng l√† gi·∫£i ph√°p hi·ªáu qu·∫£ ƒë·ªÉ gi·∫£m r√°c th·∫£i nh·ª±a.',
    });

    // Seed Questions for Lesson 3
    await db.insert('questions', {
      'lessonId': 3,
      'question': 'Nhi·ªát ƒë·ªô ƒëi·ªÅu h√≤a ti·∫øt ki·ªám ƒëi·ªán nh·∫•t l√†?',
      'options': '18-20¬∞C|||21-23¬∞C|||25-26¬∞C|||28-30¬∞C',
      'correctAnswer': 2,
      'explanation': 'Nhi·ªát ƒë·ªô 25-26¬∞C l√† m·ª©c t·ªëi ∆∞u, v·ª´a tho·∫£i m√°i v·ª´a ti·∫øt ki·ªám ƒëi·ªán.',
    });

    // Seed Questions for Lesson 4
    await db.insert('questions', {
      'lessonId': 4,
      'question': 'Nguy√™n nh√¢n ch√≠nh c·ªßa bi·∫øn ƒë·ªïi kh√≠ h·∫≠u l√†?',
      'options': 'M∆∞a nhi·ªÅu|||Kh√≠ nh√† k√≠nh tƒÉng|||Gi√≥ m·∫°nh|||S√≥ng th·∫ßn',
      'correctAnswer': 1,
      'explanation': 'Kh√≠ nh√† k√≠nh t·ª´ ho·∫°t ƒë·ªông con ng∆∞·ªùi l√† nguy√™n nh√¢n ch√≠nh g√¢y bi·∫øn ƒë·ªïi kh√≠ h·∫≠u.',
    });

    // Seed Questions for Lesson 5
    await db.insert('questions', {
      'lessonId': 5,
      'question': 'Vai tr√≤ quan tr·ªçng nh·∫•t c·ªßa c√¢y xanh l√†?',
      'options': 'L√†m ƒë·∫πp c·∫£nh quan|||S·∫£n xu·∫•t oxy, h·∫•p th·ª• CO2|||L√†m b√≥ng m√°t|||Cho tr√°i ngon',
      'correctAnswer': 1,
      'explanation': 'C√¢y xanh s·∫£n xu·∫•t oxy v√† h·∫•p th·ª• CO2, vai tr√≤ quan tr·ªçng nh·∫•t cho s·ª± s·ªëng tr√™n Tr√°i ƒê·∫•t.',
    });

    // Additional questions for Lesson 1 (Water pollution)
    await db.insert('questions', {
      'lessonId': 1,
      'question': 'Gi·∫£i ph√°p n√†o gi√∫p gi·∫£m √¥ nhi·ªÖm n∆∞·ªõc?',
      'options': 'ƒê·ªï r√°c xu·ªëng s√¥ng|||X√¢y h·ªá th·ªëng x·ª≠ l√Ω n∆∞·ªõc th·∫£i|||S·ª≠ d·ª•ng nhi·ªÅu h√≥a ch·∫•t|||Ch√¥n r√°c g·∫ßn ngu·ªìn n∆∞·ªõc',
      'correctAnswer': 1,
      'explanation': 'X√¢y d·ª±ng h·ªá th·ªëng x·ª≠ l√Ω n∆∞·ªõc th·∫£i hi·ªán ƒë·∫°i l√† gi·∫£i ph√°p quan tr·ªçng ƒë·ªÉ gi·∫£m √¥ nhi·ªÖm n∆∞·ªõc.',
    });

    await db.insert('questions', {
      'lessonId': 1,
      'question': 'Ngu·ªìn n√†o KH√îNG g√¢y √¥ nhi·ªÖm n∆∞·ªõc?',
      'options': 'N∆∞·ªõc m∆∞a s·∫°ch|||N∆∞·ªõc th·∫£i nh√† m√°y|||Thu·ªëc tr·ª´ s√¢u|||R√°c th·∫£i sinh ho·∫°t',
      'correctAnswer': 0,
      'explanation': 'N∆∞·ªõc m∆∞a t·ª± nhi√™n l√† s·∫°ch, kh√¥ng g√¢y √¥ nhi·ªÖm. C√°c ngu·ªìn kh√°c ƒë·ªÅu c√≥ th·ªÉ g√¢y √¥ nhi·ªÖm n∆∞·ªõc.',
    });

    await db.insert('questions', {
      'lessonId': 1,
      'question': 'H√≥a ch·∫•t n√†o t·ª´ n√¥ng nghi·ªáp g√¢y √¥ nhi·ªÖm n∆∞·ªõc?',
      'options': 'N∆∞·ªõc t∆∞·ªõi|||Ph√¢n b√≥n v√† thu·ªëc tr·ª´ s√¢u|||ƒê·∫•t tr·ªìng|||R∆°m r·∫°',
      'correctAnswer': 1,
      'explanation': 'Ph√¢n b√≥n h√≥a h·ªçc v√† thu·ªëc tr·ª´ s√¢u th·∫•m xu·ªëng ngu·ªìn n∆∞·ªõc, g√¢y √¥ nhi·ªÖm nghi√™m tr·ªçng.',
    });

    await db.insert('questions', {
      'lessonId': 1,
      'question': 'D·∫•u hi·ªáu n√†o cho th·∫•y n∆∞·ªõc b·ªã √¥ nhi·ªÖm?',
      'options': 'N∆∞·ªõc trong v·∫Øt|||N∆∞·ªõc c√≥ m√πi h√¥i, ƒë·ª•c|||N∆∞·ªõc m√°t l·∫°nh|||N∆∞·ªõc c√≥ v·ªã ng·ªçt',
      'correctAnswer': 1,
      'explanation': 'N∆∞·ªõc √¥ nhi·ªÖm th∆∞·ªùng c√≥ m√πi h√¥i, m√†u ƒë·ª•c, c√≥ b·ªçt ho·∫∑c c·∫∑n b·∫©n.',
    });

    await db.insert('questions', {
      'lessonId': 1,
      'question': '√î nhi·ªÖm d·∫ßu m·ªè ·∫£nh h∆∞·ªüng ƒë·∫øn sinh v·∫≠t bi·ªÉn nh∆∞ th·∫ø n√†o?',
      'options': 'Gi√∫p ch√∫ng l·ªõn nhanh|||L√†m ch·∫øt c√°, h·∫£i s·∫£n|||Kh√¥ng ·∫£nh h∆∞·ªüng|||TƒÉng s·ªë l∆∞·ª£ng',
      'correctAnswer': 1,
      'explanation': 'D·∫ßu m·ªè tr√†n ra bi·ªÉn l√†m c√°, h·∫£i s·∫£n ch·∫øt h√†ng lo·∫°t, ph√° h·ªßy h·ªá sinh th√°i bi·ªÉn.',
    });

    await db.insert('questions', {
      'lessonId': 1,
      'question': 'Vi khu·∫©n trong n∆∞·ªõc √¥ nhi·ªÖm g√¢y b·ªánh g√¨?',
      'options': 'C·∫£m c√∫m|||Ti√™u ch·∫£y, nhi·ªÖm khu·∫©n|||ƒêau ƒë·∫ßu|||S·ªët xu·∫•t huy·∫øt',
      'correctAnswer': 1,
      'explanation': 'Vi khu·∫©n trong n∆∞·ªõc √¥ nhi·ªÖm g√¢y ti√™u ch·∫£y, ki·∫øt l·ªµ, t·∫£ v√† c√°c b·ªánh nhi·ªÖm khu·∫©n ƒë∆∞·ªùng ru·ªôt.',
    });

    await db.insert('questions', {
      'lessonId': 1,
      'question': 'C√°ch n√†o b·∫£o v·ªá ngu·ªìn n∆∞·ªõc t·∫°i c·ªông ƒë·ªìng?',
      'options': 'V·ª©t r√°c b·ª´a b√£i|||Gi√°m s√°t, b√°o c√°o √¥ nhi·ªÖm|||Kh√¥ng quan t√¢m|||X·∫£ n∆∞·ªõc th·∫£i t·ª± do',
      'correctAnswer': 1,
      'explanation': 'Gi√°m s√°t v√† b√°o c√°o k·ªãp th·ªùi c√°c h√†nh vi g√¢y √¥ nhi·ªÖm gi√∫p b·∫£o v·ªá ngu·ªìn n∆∞·ªõc c·ªông ƒë·ªìng.',
    });

    await db.insert('questions', {
      'lessonId': 1,
      'question': 'X·ª≠ l√Ω n∆∞·ªõc th·∫£i sinh ho·∫°t gi√∫p ƒë∆∞·ª£c g√¨?',
      'options': 'L√£ng ph√≠ ti·ªÅn|||Gi·∫£m √¥ nhi·ªÖm, b·∫£o v·ªá s·ª©c kh·ªèe|||Kh√¥ng c·∫ßn thi·∫øt|||L√†m n∆∞·ªõc b·∫©n h∆°n',
      'correctAnswer': 1,
      'explanation': 'X·ª≠ l√Ω n∆∞·ªõc th·∫£i lo·∫°i b·ªè ch·∫•t b·∫©n, vi khu·∫©n, gi·∫£m √¥ nhi·ªÖm v√† b·∫£o v·ªá s·ª©c kh·ªèe c·ªông ƒë·ªìng.',
    });

    // Additional questions for Lesson 2 (Plastic waste)
    await db.insert('questions', {
      'lessonId': 2,
      'question': 'Vi nh·ª±a l√† g√¨?',
      'options': 'Nh·ª±a m·ªõi s·∫£n xu·∫•t|||Nh·ª±a t√°i ch·∫ø|||M·∫£nh nh·ª±a nh·ªè h∆°n 5mm|||Nh·ª±a sinh h·ªçc',
      'correctAnswer': 2,
      'explanation': 'Vi nh·ª±a l√† nh·ªØng m·∫£nh nh·ª±a nh·ªè h∆°n 5mm, c√≥ th·ªÉ x√¢m nh·∫≠p v√†o c∆° th·ªÉ qua th·ª©c ƒÉn v√† n∆∞·ªõc u·ªëng.',
    });

    await db.insert('questions', {
      'lessonId': 2,
      'question': 'Lo·∫°i nh·ª±a n√†o kh√≥ t√°i ch·∫ø nh·∫•t?',
      'options': 'Chai n∆∞·ªõc|||T√∫i nilon m·ªèng|||Th√πng nh·ª±a|||·ªêng nh·ª±a',
      'correctAnswer': 1,
      'explanation': 'T√∫i nilon m·ªèng r·∫•t kh√≥ t√°i ch·∫ø do m·ªèng, d·ªÖ r√°ch v√† th∆∞·ªùng b·ªã b·∫©n.',
    });

    await db.insert('questions', {
      'lessonId': 2,
      'question': 'R√°c th·∫£i nh·ª±a tr√™n bi·ªÉn ·∫£nh h∆∞·ªüng g√¨ ƒë·∫øn ƒë·ªông v·∫≠t?',
      'options': 'Kh√¥ng ·∫£nh h∆∞·ªüng|||Nu·ªët ph·∫£i, m·∫Øc k·∫πt, ch·∫øt|||Gi√∫p ch√∫ng s·ªëng t·ªët|||TƒÉng s·ªë l∆∞·ª£ng',
      'correctAnswer': 1,
      'explanation': 'ƒê·ªông v·∫≠t bi·ªÉn nu·ªët ph·∫£i nh·ª±a, b·ªã m·∫Øc k·∫πt trong r√°c nh·ª±a v√† ch·∫øt h√†ng lo·∫°t.',
    });

    await db.insert('questions', {
      'lessonId': 2,
      'question': 'Nh·ª±a sinh h·ªçc (bioplastic) c√≥ l·ª£i g√¨?',
      'options': 'Kh√¥ng ph√¢n h·ªßy|||Ph√¢n h·ªßy nhanh h∆°n|||R·∫ª h∆°n|||B·ªÅn h∆°n',
      'correctAnswer': 1,
      'explanation': 'Nh·ª±a sinh h·ªçc l√†m t·ª´ nguy√™n li·ªáu t·ª± nhi√™n, ph√¢n h·ªßy nhanh h∆°n nh·ª±a th√¥ng th∆∞·ªùng.',
    });

    await db.insert('questions', {
      'lessonId': 2,
      'question': 'M·ªói nƒÉm c√≥ bao nhi√™u t·∫•n nh·ª±a ƒë·ªï ra ƒë·∫°i d∆∞∆°ng?',
      'options': '1,000 t·∫•n|||100,000 t·∫•n|||H√†ng tri·ªáu t·∫•n|||Kh√¥ng c√≥',
      'correctAnswer': 2,
      'explanation': 'H√†ng tri·ªáu t·∫•n nh·ª±a ƒë·ªï ra ƒë·∫°i d∆∞∆°ng m·ªói nƒÉm, g√¢y √¥ nhi·ªÖm nghi√™m tr·ªçng.',
    });

    await db.insert('questions', {
      'lessonId': 2,
      'question': 'K√Ω hi·ªáu t√°i ch·∫ø tr√™n nh·ª±a c√≥ √Ω nghƒ©a g√¨?',
      'options': 'Trang tr√≠|||Lo·∫°i nh·ª±a v√† kh·∫£ nƒÉng t√°i ch·∫ø|||Gi√° b√°n|||Th∆∞∆°ng hi·ªáu',
      'correctAnswer': 1,
      'explanation': 'K√Ω hi·ªáu (s·ªë 1-7) cho bi·∫øt lo·∫°i nh·ª±a v√† c√°ch t√°i ch·∫ø ph√π h·ª£p.',
    });

    await db.insert('questions', {
      'lessonId': 2,
      'question': 'C√°ch n√†o gi·∫£m r√°c nh·ª±a hi·ªáu qu·∫£ nh·∫•t?',
      'options': 'Mua nhi·ªÅu ƒë·ªì nh·ª±a|||D√πng t√∫i v·∫£i, h·ªôp inox|||ƒê·ªët nh·ª±a|||Ch√¥n l·∫•p',
      'correctAnswer': 1,
      'explanation': 'Thay th·∫ø b·∫±ng ƒë·ªì d√πng t√°i s·ª≠ d·ª•ng nh∆∞ t√∫i v·∫£i, h·ªôp inox l√† c√°ch hi·ªáu qu·∫£ nh·∫•t.',
    });

    await db.insert('questions', {
      'lessonId': 2,
      'question': 'Chai nh·ª±a c√≥ th·ªÉ t√°i ch·∫ø th√†nh g√¨?',
      'options': 'Kh√¥ng t√°i ch·∫ø ƒë∆∞·ª£c|||Qu·∫ßn √°o, th·∫£m, ƒë·ªì d√πng m·ªõi|||Th·ª©c ƒÉn|||N∆∞·ªõc u·ªëng',
      'correctAnswer': 1,
      'explanation': 'Chai nh·ª±a t√°i ch·∫ø c√≥ th·ªÉ l√†m s·ª£i v·∫£i (qu·∫ßn √°o), th·∫£m, ƒë·ªì d√πng nh·ª±a m·ªõi.',
    });

    // Additional questions for Lesson 3 (Energy saving)
    await db.insert('questions', {
      'lessonId': 3,
      'question': 'Lo·∫°i b√≥ng ƒë√®n n√†o ti·∫øt ki·ªám ƒëi·ªán nh·∫•t?',
      'options': 'B√≥ng s·ª£i ƒë·ªët|||B√≥ng hu·ª≥nh quang|||B√≥ng LED|||B√≥ng halogen',
      'correctAnswer': 2,
      'explanation': 'B√≥ng ƒë√®n LED ti·∫øt ki·ªám ƒëi·ªán nh·∫•t, s·ª≠ d·ª•ng √≠t nƒÉng l∆∞·ª£ng h∆°n 80% so v·ªõi b√≥ng s·ª£i ƒë·ªët.',
    });

    await db.insert('questions', {
      'lessonId': 3,
      'question': 'H√†nh ƒë·ªông n√†o KH√îNG ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng?',
      'options': 'T·∫Øt ƒë√®n khi ra kh·ªèi ph√≤ng|||R√∫t ph√≠ch c·∫Øm thi·∫øt b·ªã|||ƒê·ªÉ ƒëi·ªÅu h√≤a 18¬∞C c·∫£ ng√†y|||S·ª≠ d·ª•ng ƒë√®n LED',
      'correctAnswer': 2,
      'explanation': 'ƒê·ªÉ ƒëi·ªÅu h√≤a 18¬∞C c·∫£ ng√†y s·∫Ω ti√™u t·ªën r·∫•t nhi·ªÅu ƒëi·ªán. Nhi·ªát ƒë·ªô 25-26¬∞C l√† h·ª£p l√Ω.',
    });

    await db.insert('questions', {
      'lessonId': 3,
      'question': 'Thi·∫øt b·ªã n√†o ti√™u t·ªën nhi·ªÅu ƒëi·ªán nh·∫•t trong nh√†?',
      'options': 'B√†n ·ªßi|||ƒêi·ªÅu h√≤a|||B√≥ng ƒë√®n|||Tivi',
      'correctAnswer': 1,
      'explanation': 'ƒêi·ªÅu h√≤a ti√™u t·ªën nhi·ªÅu ƒëi·ªán nh·∫•t, chi·∫øm 50-60% h√≥a ƒë∆°n ti·ªÅn ƒëi·ªán.',
    });

    await db.insert('questions', {
      'lessonId': 3,
      'question': 'T·∫°i sao n√™n r√∫t ph√≠ch c·∫Øm thi·∫øt b·ªã kh√¥ng d√πng?',
      'options': 'Kh√¥ng c·∫ßn thi·∫øt|||Thi·∫øt b·ªã v·∫´n ti√™u ƒëi·ªán ch·∫ø ƒë·ªô ch·ªù|||ƒê·ªÉ ti·∫øt ki·ªám th·ªùi gian|||Kh√¥ng l√Ω do',
      'correctAnswer': 1,
      'explanation': 'Thi·∫øt b·ªã ·ªü ch·∫ø ƒë·ªô ch·ªù v·∫´n ti√™u ƒëi·ªán (ƒëi·ªán ma), r√∫t ph√≠ch gi√∫p ti·∫øt ki·ªám 5-10% ƒëi·ªán.',
    });

    await db.insert('questions', {
      'lessonId': 3,
      'question': 'Nh√£n Energy Star tr√™n thi·∫øt b·ªã c√≥ √Ω nghƒ©a g√¨?',
      'options': 'Gi√° cao|||Ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng|||M√†u ƒë·∫πp|||H√†ng m·ªõi',
      'correctAnswer': 1,
      'explanation': 'Energy Star l√† ch·ª©ng nh·∫≠n thi·∫øt b·ªã ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng, hi·ªáu su·∫•t cao.',
    });

    await db.insert('questions', {
      'lessonId': 3,
      'question': 'S·ª≠ d·ª•ng qu·∫°t thay ƒëi·ªÅu h√≤a gi√∫p ti·∫øt ki·ªám bao nhi√™u?',
      'options': '10-20%|||30-40%|||T·ªõi 90%|||Kh√¥ng ti·∫øt ki·ªám',
      'correctAnswer': 2,
      'explanation': 'Qu·∫°t ti√™u t·ªën √≠t ƒëi·ªán h∆°n ƒëi·ªÅu h√≤a t·ªõi 90%, r·∫•t ti·∫øt ki·ªám khi th·ªùi ti·∫øt m√°t.',
    });

    await db.insert('questions', {
      'lessonId': 3,
      'question': 'B·∫£o tr√¨ m√°y l·∫°nh ƒë·ªãnh k·ª≥ gi√∫p g√¨?',
      'options': 'T·ªën ti·ªÅn|||Ti·∫øt ki·ªám ƒëi·ªán, m√°y b·ªÅn l√¢u|||Kh√¥ng c·∫ßn thi·∫øt|||H·ªèng nhanh h∆°n',
      'correctAnswer': 1,
      'explanation': 'V·ªá sinh l·ªçc gi√≥, b∆°m gas gi√∫p m√°y l·∫°nh ho·∫°t ƒë·ªông hi·ªáu qu·∫£, ti·∫øt ki·ªám 10-30% ƒëi·ªán.',
    });

    await db.insert('questions', {
      'lessonId': 3,
      'question': 'C√°ch n√†o ti·∫øt ki·ªám ƒëi·ªán khi n·∫•u ƒÉn?',
      'options': 'N·∫•u t·ª´ng l√∫c m·ªôt √≠t|||N·∫•u nhi·ªÅu m√≥n c√πng l√∫c|||ƒê·ªÉ l·ª≠a to|||M·ªü n·∫Øp li√™n t·ª•c',
      'correctAnswer': 1,
      'explanation': 'N·∫•u nhi·ªÅu m√≥n c√πng l√∫c, ƒë·∫≠y n·∫Øp k√≠n gi√∫p gi·ªØ nhi·ªát v√† ti·∫øt ki·ªám gas/ƒëi·ªán.',
    });

    // Additional questions for Lesson 4 (Climate change)
    await db.insert('questions', {
      'lessonId': 4,
      'question': 'H·∫≠u qu·∫£ n√†o KH√îNG ph·∫£i do bi·∫øn ƒë·ªïi kh√≠ h·∫≠u?',
      'options': 'BƒÉng tan, m·ª±c n∆∞·ªõc bi·ªÉn d√¢ng|||Thi√™n tai c·ª±c ƒëoan|||ƒê·ªông ƒë·∫•t|||H·∫°n h√°n nghi√™m tr·ªçng',
      'correctAnswer': 2,
      'explanation': 'ƒê·ªông ƒë·∫•t kh√¥ng li√™n quan ƒë·∫øn bi·∫øn ƒë·ªïi kh√≠ h·∫≠u. C√°c hi·ªán t∆∞·ª£ng kh√°c ƒë·ªÅu do nhi·ªát ƒë·ªô Tr√°i ƒê·∫•t tƒÉng g√¢y ra.',
    });

    await db.insert('questions', {
      'lessonId': 4,
      'question': 'C√°ch n√†o gi√∫p gi·∫£m bi·∫øn ƒë·ªïi kh√≠ h·∫≠u?',
      'options': 'ƒê·ªët nhi·ªÅu than|||Ph√° r·ª´ng|||Tr·ªìng c√¢y v√† b·∫£o v·ªá r·ª´ng|||TƒÉng chƒÉn nu√¥i b√≤',
      'correctAnswer': 2,
      'explanation': 'Tr·ªìng c√¢y v√† b·∫£o v·ªá r·ª´ng gi√∫p h·∫•p th·ª• CO2, gi·∫£m kh√≠ nh√† k√≠nh, ch·ªëng bi·∫øn ƒë·ªïi kh√≠ h·∫≠u.',
    });

    await db.insert('questions', {
      'lessonId': 4,
      'question': 'BƒÉng tan ·ªü Nam C·ª±c v√† B·∫Øc C·ª±c g√¢y ra v·∫•n ƒë·ªÅ g√¨?',
      'options': 'Kh√¥ng c√≥ v·∫•n ƒë·ªÅ|||M·ª±c n∆∞·ªõc bi·ªÉn d√¢ng|||Nhi·ªÅu ƒë·∫•t ƒëai h∆°n|||Kh√≠ h·∫≠u m√°t h∆°n',
      'correctAnswer': 1,
      'explanation': 'BƒÉng tan l√†m m·ª±c n∆∞·ªõc bi·ªÉn d√¢ng, ng·∫≠p c√°c v√πng ven bi·ªÉn, ƒë·∫£o nh·ªè.',
    });

    await db.insert('questions', {
      'lessonId': 4,
      'question': 'N√¥ng nghi·ªáp b·ªã ·∫£nh h∆∞·ªüng b·ªüi BƒêKH nh∆∞ th·∫ø n√†o?',
      'options': 'M√πa m√†ng t·ªët h∆°n|||M·∫•t m√πa, d·ªãch b·ªánh|||Kh√¥ng ·∫£nh h∆∞·ªüng|||TƒÉng s·∫£n l∆∞·ª£ng',
      'correctAnswer': 1,
      'explanation': 'BƒêKH g√¢y h·∫°n h√°n, l≈© l·ª•t, d·ªãch b·ªánh l√†m m·∫•t m√πa, gi·∫£m s·∫£n l∆∞·ª£ng n√¥ng nghi·ªáp.',
    });

    await db.insert('questions', {
      'lessonId': 4,
      'question': 'Nhi·ªát ƒë·ªô Tr√°i ƒê·∫•t ƒë√£ tƒÉng bao nhi√™u k·ªÉ t·ª´ th·ªùi k·ª≥ ti·ªÅn c√¥ng nghi·ªáp?',
      'options': '0.1¬∞C|||0.5¬∞C|||Kho·∫£ng 1.1¬∞C|||5¬∞C',
      'correctAnswer': 2,
      'explanation': 'Nhi·ªát ƒë·ªô to√†n c·∫ßu ƒë√£ tƒÉng kho·∫£ng 1.1¬∞C, nguy c∆° v∆∞·ª£t 1.5¬∞C trong v√†i th·∫≠p k·ª∑ t·ªõi.',
    });

    await db.insert('questions', {
      'lessonId': 4,
      'question': 'Giao th√¥ng v·∫≠n t·∫£i th·∫£i ra kh√≠ g√¨ g√¢y BƒêKH?',
      'options': 'Oxy|||CO2|||Hydro|||Nit∆°',
      'correctAnswer': 1,
      'explanation': 'Xe c·ªô th·∫£i CO2 t·ª´ ƒë·ªët xƒÉng d·∫ßu, chi·∫øm 24% l∆∞·ª£ng kh√≠ nh√† k√≠nh to√†n c·∫ßu.',
    });

    await db.insert('questions', {
      'lessonId': 4,
      'question': 'C√°ch n√†o gi·∫£m kh√≠ th·∫£i t·ª´ giao th√¥ng?',
      'options': 'Mua th√™m √¥ t√¥|||ƒêi xe ƒë·∫°p, xe bu√Ωt|||L√°i xe nhanh|||Kh√¥ng b·∫£o d∆∞·ª°ng xe',
      'correctAnswer': 1,
      'explanation': 'S·ª≠ d·ª•ng ph∆∞∆°ng ti·ªán c√¥ng c·ªông, xe ƒë·∫°p gi√∫p gi·∫£m kh√≠ th·∫£i ƒë√°ng k·ªÉ.',
    });

    await db.insert('questions', {
      'lessonId': 4,
      'question': 'T·∫ßng ozon b·ªã th·ªßng ·∫£nh h∆∞·ªüng g√¨?',
      'options': 'Kh√¥ng ·∫£nh h∆∞·ªüng|||Tia UV g√¢y ung th∆∞ da|||Kh√≠ h·∫≠u m√°t|||M∆∞a nhi·ªÅu',
      'correctAnswer': 1,
      'explanation': 'T·∫ßng ozon b·∫£o v·ªá kh·ªèi tia UV, khi b·ªã th·ªßng g√¢y ung th∆∞ da, b·ªánh m·∫Øt.',
    });

    // Additional questions for Lesson 5 (Nature & Ecosystem)
    await db.insert('questions', {
      'lessonId': 5,
      'question': 'Khi m·ªôt lo√†i bi·∫øn m·∫•t kh·ªèi h·ªá sinh th√°i, ƒëi·ªÅu g√¨ x·∫£y ra?',
      'options': 'Kh√¥ng ·∫£nh h∆∞·ªüng g√¨|||To√†n b·ªô h·ªá th·ªëng b·ªã ·∫£nh h∆∞·ªüng|||Ch·ªâ ·∫£nh h∆∞·ªüng lo√†i ƒë√≥|||H·ªá th·ªëng t·ªët h∆°n',
      'correctAnswer': 1,
      'explanation': 'M·ªói lo√†i ƒë·ªÅu c√≥ vai tr√≤ ri√™ng. Khi m·ªôt lo√†i bi·∫øn m·∫•t, to√†n b·ªô h·ªá sinh th√°i b·ªã ·∫£nh h∆∞·ªüng.',
    });

    await db.insert('questions', {
      'lessonId': 5,
      'question': 'H√†nh ƒë·ªông n√†o b·∫£o v·ªá ƒëa d·∫°ng sinh h·ªçc?',
      'options': 'SƒÉn b·∫Øt ƒë·ªông v·∫≠t|||Mua b√°n ƒë·ªông v·∫≠t hoang d√£|||Tr·ªìng c√¢y b·∫£n ƒë·ªãa|||S·ª≠ d·ª•ng nhi·ªÅu h√≥a ch·∫•t',
      'correctAnswer': 2,
      'explanation': 'Tr·ªìng c√¢y b·∫£n ƒë·ªãa gi√∫p t·∫°o m√¥i tr∆∞·ªùng s·ªëng cho ƒë·ªông v·∫≠t v√† b·∫£o v·ªá ƒëa d·∫°ng sinh h·ªçc.',
    });

    await db.insert('questions', {
      'lessonId': 5,
      'question': 'M·ªôt c√¢y tr∆∞·ªüng th√†nh c√≥ th·ªÉ h·∫•p th·ª• bao nhi√™u kg CO2/nƒÉm?',
      'options': '1-2 kg|||5-10 kg|||20-30 kg|||100 kg',
      'correctAnswer': 2,
      'explanation': 'M·ªôt c√¢y tr∆∞·ªüng th√†nh h·∫•p th·ª• kho·∫£ng 20-30 kg CO2 m·ªói nƒÉm, gi√∫p gi·∫£m kh√≠ nh√† k√≠nh.',
    });

    await db.insert('questions', {
      'lessonId': 5,
      'question': 'Chu·ªói th·ª©c ƒÉn b·ªã ƒë·ª©t khi n√†o?',
      'options': 'C√≥ th√™m lo√†i m·ªõi|||M·ªôt lo√†i b·ªã tuy·ªát ch·ªßng|||M√πa m√†ng t·ªët|||Nhi·ªÅu th·ª©c ƒÉn',
      'correctAnswer': 1,
      'explanation': 'Khi m·ªôt lo√†i trong chu·ªói th·ª©c ƒÉn tuy·ªát ch·ªßng, to√†n b·ªô chu·ªói b·ªã ·∫£nh h∆∞·ªüng.',
    });

    await db.insert('questions', {
      'lessonId': 5,
      'question': 'Ong c√≥ vai tr√≤ g√¨ trong h·ªá sinh th√°i?',
      'options': 'Kh√¥ng c√≥|||Th·ª• ph·∫•n cho hoa|||G√¢y h·∫°i|||Ch·ªâ l√†m m·∫≠t ong',
      'correctAnswer': 1,
      'explanation': 'Ong th·ª• ph·∫•n cho 75% c√¢y tr·ªìng, r·∫•t quan tr·ªçng cho n√¥ng nghi·ªáp v√† h·ªá sinh th√°i.',
    });

    await db.insert('questions', {
      'lessonId': 5,
      'question': 'Lo√†i ngo·∫°i lai x√¢m l·∫•n c√≥ h·∫°i nh∆∞ th·∫ø n√†o?',
      'options': 'T·ªët cho m√¥i tr∆∞·ªùng|||Ph√° h·ªßy lo√†i b·∫£n ƒë·ªãa|||TƒÉng ƒëa d·∫°ng|||Kh√¥ng ·∫£nh h∆∞·ªüng',
      'correctAnswer': 1,
      'explanation': 'Lo√†i ngo·∫°i lai c·∫°nh tranh, ƒÉn m·∫•t lo√†i b·∫£n ƒë·ªãa, ph√° h·ªßy c√¢n b·∫±ng sinh th√°i.',
    });

    await db.insert('questions', {
      'lessonId': 5,
      'question': 'C√¢y xanh gi√∫p gi·∫£m nhi·ªát ƒë·ªô th√†nh ph·ªë bao nhi√™u?',
      'options': 'Kh√¥ng gi·∫£m|||1-2¬∞C|||3-5¬∞C|||10¬∞C',
      'correctAnswer': 2,
      'explanation': 'C√¢y xanh gi·∫£m nhi·ªát ƒë·ªô th√†nh ph·ªë 3-5¬∞C nh·ªù b√≥ng m√°t v√† b·ªëc h∆°i n∆∞·ªõc.',
    });

    await db.insert('questions', {
      'lessonId': 5,
      'question': 'R·ª´ng ng·∫≠p m·∫∑n b·∫£o v·ªá b·ªù bi·ªÉn kh·ªèi?',
      'options': 'M∆∞a|||S√≥ng th·∫ßn, b√£o|||N·∫Øng|||Gi√≥ nh·∫π',
      'correctAnswer': 1,
      'explanation': 'R·ª´ng ng·∫≠p m·∫∑n l√† h√†ng r√†o t·ª± nhi√™n ch·ªëng s√≥ng th·∫ßn, b√£o, b·∫£o v·ªá c·ªông ƒë·ªìng ven bi·ªÉn.',
    });

    // Questions for Lesson 6 (Save water daily)
    await db.insert('questions', {
      'lessonId': 6,
      'question': 'N∆∞·ªõc ng·ªçt chi·∫øm bao nhi√™u % t·ªïng l∆∞·ª£ng n∆∞·ªõc tr√™n Tr√°i ƒê·∫•t?',
      'options': '2.5%|||10%|||25%|||50%',
      'correctAnswer': 0,
      'explanation': 'N∆∞·ªõc ng·ªçt ch·ªâ chi·∫øm 2.5% t·ªïng l∆∞·ª£ng n∆∞·ªõc, r·∫•t khan hi·∫øm v√† c·∫ßn ti·∫øt ki·ªám.',
    });

    await db.insert('questions', {
      'lessonId': 6,
      'question': 'C√°ch n√†o KH√îNG gi√∫p ti·∫øt ki·ªám n∆∞·ªõc?',
      'options': 'T·∫Øm v√≤i sen thay v√¨ b·ªìn|||T·∫Øt v√≤i khi x√† ph√≤ng|||ƒê·ªÉ v√≤i ch·∫£y khi ƒë√°nh rƒÉng|||S·ª≠a v√≤i r√≤ r·ªâ',
      'correctAnswer': 2,
      'explanation': 'ƒê·ªÉ v√≤i ch·∫£y khi ƒë√°nh rƒÉng l√£ng ph√≠ r·∫•t nhi·ªÅu n∆∞·ªõc. N√™n t·∫Øt v√≤i khi kh√¥ng d√πng.',
    });

    await db.insert('questions', {
      'lessonId': 6,
      'question': 'N∆∞·ªõc vo g·∫°o c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨?',
      'options': 'U·ªëng|||T∆∞·ªõi c√¢y|||Gi·∫∑t qu·∫ßn √°o|||Kh√¥ng d√πng ƒë∆∞·ª£c',
      'correctAnswer': 1,
      'explanation': 'N∆∞·ªõc vo g·∫°o c√≥ ch·∫•t dinh d∆∞·ª°ng, r·∫•t t·ªët ƒë·ªÉ t∆∞·ªõi c√¢y, v·ª´a ti·∫øt ki·ªám v·ª´a b·ªï d∆∞·ª°ng cho c√¢y.',
    });

    await db.insert('questions', {
      'lessonId': 6,
      'question': 'M·ªôt v√≤i n∆∞·ªõc r√≤ r·ªâ l√£ng ph√≠ bao nhi√™u l√≠t/ng√†y?',
      'options': '1-2 l√≠t|||5-10 l√≠t|||20-50 l√≠t|||100 l√≠t',
      'correctAnswer': 2,
      'explanation': 'V√≤i r√≤ r·ªâ c√≥ th·ªÉ l√£ng ph√≠ 20-50 l√≠t n∆∞·ªõc m·ªói ng√†y, n√™n s·ª≠a ngay khi ph√°t hi·ªán.',
    });

    await db.insert('questions', {
      'lessonId': 6,
      'question': 'T·∫Øm b·ªìn ti√™u t·ªën nhi·ªÅu n∆∞·ªõc h∆°n t·∫Øm v√≤i sen bao nhi√™u?',
      'options': 'B·∫±ng nhau|||G·∫•p 2 l·∫ßn|||G·∫•p 3-4 l·∫ßn|||√çt h∆°n',
      'correctAnswer': 2,
      'explanation': 'T·∫Øm b·ªìn d√πng kho·∫£ng 150-200 l√≠t, t·∫Øm v√≤i sen ch·ªâ 40-60 l√≠t, ti·∫øt ki·ªám g·∫•p 3-4 l·∫ßn.',
    });

    await db.insert('questions', {
      'lessonId': 6,
      'question': 'M√°y gi·∫∑t n√™n s·ª≠ d·ª•ng khi n√†o ƒë·ªÉ ti·∫øt ki·ªám n∆∞·ªõc?',
      'options': 'Gi·∫∑t √≠t qu·∫ßn √°o m·ªói l·∫ßn|||Gi·∫∑t ƒë·∫ßy t·∫£i|||Gi·∫∑t li√™n t·ª•c|||Gi·∫∑t t·ª´ng chi·∫øc',
      'correctAnswer': 1,
      'explanation': 'Gi·∫∑t ƒë·∫ßy t·∫£i gi√∫p ti·∫øt ki·ªám n∆∞·ªõc v√† ƒëi·ªán, kh√¥ng l√£ng ph√≠ cho c√°c m·∫ª gi·∫∑t nh·ªè.',
    });

    await db.insert('questions', {
      'lessonId': 6,
      'question': 'N∆∞·ªõc r·ª≠a rau c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨?',
      'options': 'Kh√¥ng d√πng ƒë∆∞·ª£c|||T∆∞·ªõi c√¢y, lau nh√†|||N·∫•u ƒÉn|||U·ªëng',
      'correctAnswer': 1,
      'explanation': 'N∆∞·ªõc r·ª≠a rau s·∫°ch c√≥ th·ªÉ t∆∞·ªõi c√¢y ho·∫∑c lau nh√†, ti·∫øt ki·ªám v√† b·∫£o v·ªá m√¥i tr∆∞·ªùng.',
    });

    await db.insert('questions', {
      'lessonId': 6,
      'question': 'B·ªìn c·∫ßu hai n√∫t x·∫£ ti·∫øt ki·ªám n∆∞·ªõc nh∆∞ th·∫ø n√†o?',
      'options': 'Kh√¥ng ti·∫øt ki·ªám|||D√πng √≠t n∆∞·ªõc cho ch·∫•t th·∫£i nh·∫π|||L√£ng ph√≠ h∆°n|||Ch·ªâ trang tr√≠',
      'correctAnswer': 1,
      'explanation': 'B·ªìn c·∫ßu hai n√∫t cho ph√©p ch·ªçn l∆∞·ª£ng n∆∞·ªõc ph√π h·ª£p (3L ho·∫∑c 6L), ti·∫øt ki·ªám ƒë√°ng k·ªÉ.',
    });

    await db.insert('questions', {
      'lessonId': 6,
      'question': 'R·ª≠a xe b·∫±ng v√≤i phun t·ªën bao nhi√™u n∆∞·ªõc?',
      'options': '10-20 l√≠t|||50-100 l√≠t|||150-300 l√≠t|||500 l√≠t',
      'correctAnswer': 2,
      'explanation': 'R·ª≠a xe b·∫±ng v√≤i phun t·ªën 150-300 l√≠t. D√πng x√¥ v√† khƒÉn ch·ªâ t·ªën 20-30 l√≠t.',
    });

    await db.insert('questions', {
      'lessonId': 6,
      'question': 'Thu n∆∞·ªõc m∆∞a c√≥ l·ª£i g√¨?',
      'options': 'Kh√¥ng c√≥ l·ª£i|||T∆∞·ªõi c√¢y, r·ª≠a xe mi·ªÖn ph√≠|||G√¢y b·ªánh|||B·∫©n kh√¥ng d√πng ƒë∆∞·ª£c',
      'correctAnswer': 1,
      'explanation': 'N∆∞·ªõc m∆∞a s·∫°ch, mi·ªÖn ph√≠, r·∫•t t·ªët ƒë·ªÉ t∆∞·ªõi c√¢y, r·ª≠a xe, gi·∫∑t s√†n.',
    });

    // Questions for Lesson 7 (Groundwater pollution)
    await db.insert('questions', {
      'lessonId': 7,
      'question': 'Nguy√™n nh√¢n ch√≠nh g√¢y √¥ nhi·ªÖm n∆∞·ªõc ng·∫ßm l√†?',
      'options': 'M∆∞a nhi·ªÅu|||R√≤ r·ªâ b·ªÉ ph·ªët v√† h√≥a ch·∫•t|||N·∫Øng n√≥ng|||Gi√≥ m·∫°nh',
      'correctAnswer': 1,
      'explanation': 'R√≤ r·ªâ b·ªÉ ph·ªët v√† h√≥a ch·∫•t th·∫•m xu·ªëng ƒë·∫•t l√† nguy√™n nh√¢n ch√≠nh g√¢y √¥ nhi·ªÖm n∆∞·ªõc ng·∫ßm.',
    });

    await db.insert('questions', {
      'lessonId': 7,
      'question': 'N∆∞·ªõc ng·∫ßm b·ªã √¥ nhi·ªÖm g√¢y ra h·∫≠u qu·∫£ g√¨?',
      'options': 'Kh√¥ng c√≥ h·∫≠u qu·∫£|||N∆∞·ªõc u·ªëng kh√¥ng an to√†n|||N∆∞·ªõc ngon h∆°n|||Gi√° n∆∞·ªõc r·∫ª h∆°n',
      'correctAnswer': 1,
      'explanation': 'N∆∞·ªõc ng·∫ßm √¥ nhi·ªÖm l√†m ngu·ªìn n∆∞·ªõc u·ªëng kh√¥ng an to√†n, g√¢y b·ªánh cho con ng∆∞·ªùi.',
    });

    await db.insert('questions', {
      'lessonId': 7,
      'question': 'C√°ch n√†o b·∫£o v·ªá n∆∞·ªõc ng·∫ßm?',
      'options': 'ƒê·ªï h√≥a ch·∫•t xu·ªëng ƒë·∫•t|||X√¢y b·ªÉ ph·ªët ƒë√∫ng quy c√°ch|||Ch√¥n r√°c b·ª´a b√£i|||Khai th√°c qu√° m·ª©c',
      'correctAnswer': 1,
      'explanation': 'X√¢y d·ª±ng b·ªÉ ph·ªët ƒë√∫ng quy c√°ch ngƒÉn r√≤ r·ªâ, b·∫£o v·ªá ngu·ªìn n∆∞·ªõc ng·∫ßm kh√¥ng b·ªã √¥ nhi·ªÖm.',
    });

    await db.insert('questions', {
      'lessonId': 7,
      'question': 'N∆∞·ªõc ng·∫ßm b·ªã nhi·ªÖm m·∫∑n do ƒë√¢u?',
      'options': 'M∆∞a nhi·ªÅu|||Khai th√°c qu√° m·ª©c|||C√¢y c·ªëi|||Kh√¥ng kh√≠',
      'correctAnswer': 1,
      'explanation': 'Khai th√°c n∆∞·ªõc ng·∫ßm qu√° m·ª©c l√†m n∆∞·ªõc bi·ªÉn th·∫•m v√†o, g√¢y nhi·ªÖm m·∫∑n.',
    });

    await db.insert('questions', {
      'lessonId': 7,
      'question': 'Nitrat trong n∆∞·ªõc ng·∫ßm t·ª´ ƒë√¢u?',
      'options': 'ƒê·∫•t|||Ph√¢n b√≥n h√≥a h·ªçc|||C√¢y c·ªëi|||M∆∞a',
      'correctAnswer': 1,
      'explanation': 'Ph√¢n b√≥n h√≥a h·ªçc th·∫•m xu·ªëng n∆∞·ªõc ng·∫ßm t·∫°o nitrat, ƒë·ªôc h·∫°i cho tr·∫ª em.',
    });

    await db.insert('questions', {
      'lessonId': 7,
      'question': 'B·ªÉ ph·ªët r√≤ r·ªâ g√¢y √¥ nhi·ªÖm g√¨?',
      'options': 'Kh√¥ng g√¢y √¥ nhi·ªÖm|||Vi khu·∫©n, m·∫ßm b·ªánh|||Ch·ªâ c√≥ m√πi|||T·ªët cho ƒë·∫•t',
      'correctAnswer': 1,
      'explanation': 'B·ªÉ ph·ªët r√≤ r·ªâ l√†m vi khu·∫©n, m·∫ßm b·ªánh th·∫•m xu·ªëng n∆∞·ªõc ng·∫ßm, nguy hi·ªÉm.',
    });

    await db.insert('questions', {
      'lessonId': 7,
      'question': 'Kho·∫£ng c√°ch an to√†n gi·ªØa b·ªÉ ph·ªët v√† gi·∫øng n∆∞·ªõc?',
      'options': '1-2m|||5-10m|||√çt nh·∫•t 15-20m|||Kh√¥ng quan tr·ªçng',
      'correctAnswer': 2,
      'explanation': 'B·ªÉ ph·ªët ph·∫£i c√°ch gi·∫øng n∆∞·ªõc √≠t nh·∫•t 15-20m ƒë·ªÉ tr√°nh √¥ nhi·ªÖm.',
    });

    await db.insert('questions', {
      'lessonId': 7,
      'question': 'D·∫•u hi·ªáu n√†o cho th·∫•y n∆∞·ªõc ng·∫ßm b·ªã √¥ nhi·ªÖm?',
      'options': 'N∆∞·ªõc trong|||M√πi l·∫°, v·ªã m·∫∑n, m√†u ƒë·ª•c|||Ngon|||M√°t l·∫°nh',
      'correctAnswer': 1,
      'explanation': 'N∆∞·ªõc ng·∫ßm √¥ nhi·ªÖm c√≥ m√πi l·∫°, v·ªã m·∫∑n ho·∫∑c kim lo·∫°i, m√†u ƒë·ª•c, c·∫ßn ki·ªÉm tra.',
    });

    await db.insert('questions', {
      'lessonId': 7,
      'question': 'Ch·∫•t n√†o t·ª´ pin/b√≥ng ƒë√®n g√¢y √¥ nhi·ªÖm n∆∞·ªõc ng·∫ßm?',
      'options': 'N∆∞·ªõc|||Kim lo·∫°i n·∫∑ng (ch√¨, th·ªßy ng√¢n)|||Nh·ª±a|||Gi·∫•y',
      'correctAnswer': 1,
      'explanation': 'Pin, b√≥ng ƒë√®n ch·ª©a kim lo·∫°i n·∫∑ng ƒë·ªôc h·∫°i, th·∫•m xu·ªëng ƒë·∫•t g√¢y √¥ nhi·ªÖm nghi√™m tr·ªçng.',
    });

    await db.insert('questions', {
      'lessonId': 7,
      'question': 'X·ª≠ l√Ω n∆∞·ªõc ng·∫ßm √¥ nhi·ªÖm nh∆∞ th·∫ø n√†o?',
      'options': 'Kh√¥ng c·∫ßn|||L·ªçc, kh·ª≠ tr√πng ho·∫∑c ƒë√†o gi·∫øng m·ªõi|||ƒêun s√¥i l√† ƒë·ªß|||Th√™m ƒë∆∞·ªùng',
      'correctAnswer': 1,
      'explanation': 'N∆∞·ªõc ng·∫ßm √¥ nhi·ªÖm c·∫ßn l·ªçc ƒë·∫∑c bi·ªát, kh·ª≠ tr√πng ho·∫∑c ƒë√†o gi·∫øng m·ªõi ·ªü v·ªã tr√≠ an to√†n.',
    });

    // Questions for Lesson 8 (Waste sorting & recycling)
    await db.insert('questions', {
      'lessonId': 8,
      'question': 'Lo·∫°i r√°c n√†o c√≥ th·ªÉ t√°i ch·∫ø?',
      'options': 'Th·ª©c ƒÉn th·ª´a|||Chai nh·ª±a|||KhƒÉn gi·∫•y ƒë√£ d√πng|||L√° c√¢y',
      'correctAnswer': 1,
      'explanation': 'Chai nh·ª±a l√† r√°c t√°i ch·∫ø, c√≥ th·ªÉ ch·∫ø bi·∫øn th√†nh s·∫£n ph·∫©m m·ªõi.',
    });

    await db.insert('questions', {
      'lessonId': 8,
      'question': 'R√°c h·ªØu c∆° c√≥ th·ªÉ l√†m g√¨?',
      'options': 'ƒê·ªët ƒëi|||V·ª©t b·ª´a b√£i|||L√†m ph√¢n compost|||Ch√¥n xu·ªëng ƒë·∫•t',
      'correctAnswer': 2,
      'explanation': 'R√°c h·ªØu c∆° c√≥ th·ªÉ ·ªß th√†nh ph√¢n compost, t·ªët cho c√¢y tr·ªìng v√† gi·∫£m r√°c th·∫£i.',
    });

    await db.insert('questions', {
      'lessonId': 8,
      'question': 'Lo·∫°i r√°c n√†o c·∫ßn x·ª≠ l√Ω ƒë·∫∑c bi·ªát?',
      'options': 'Gi·∫•y|||Pin v√† b√≥ng ƒë√®n|||Chai th·ªßy tinh|||Lon kim lo·∫°i',
      'correctAnswer': 1,
      'explanation': 'Pin v√† b√≥ng ƒë√®n l√† r√°c nguy h·∫°i, ch·ª©a ch·∫•t ƒë·ªôc, c·∫ßn x·ª≠ l√Ω ƒë·∫∑c bi·ªát.',
    });

    await db.insert('questions', {
      'lessonId': 8,
      'question': 'M√†u th√πng r√°c n√†o d√πng cho r√°c t√°i ch·∫ø?',
      'options': 'ƒêen|||Xanh|||ƒê·ªè|||V√†ng',
      'correctAnswer': 1,
      'explanation': 'Th√πng xanh (ho·∫∑c v√†ng) d√πng cho r√°c t√°i ch·∫ø nh∆∞ nh·ª±a, gi·∫•y, kim lo·∫°i.',
    });

    await db.insert('questions', {
      'lessonId': 8,
      'question': 'Gi·∫•y d√≠nh bƒÉng keo c√≥ t√°i ch·∫ø ƒë∆∞·ª£c kh√¥ng?',
      'options': 'C√≥|||Kh√≥ t√°i ch·∫ø|||R·∫•t t·ªët|||Kh√¥ng quan tr·ªçng',
      'correctAnswer': 1,
      'explanation': 'Gi·∫•y d√≠nh bƒÉng keo, ghim kh√≥ t√°i ch·∫ø. C·∫ßn g·ª° s·∫°ch tr∆∞·ªõc khi b·ªè v√†o th√πng t√°i ch·∫ø.',
    });

    await db.insert('questions', {
      'lessonId': 8,
      'question': 'Lon kim lo·∫°i n√™n x·ª≠ l√Ω th·∫ø n√†o tr∆∞·ªõc khi t√°i ch·∫ø?',
      'options': 'ƒê·ªÉ nguy√™n|||R·ª≠a s·∫°ch, l√†m ph·∫≥ng|||ƒê·∫≠p v·ª°|||ƒê·ªët',
      'correctAnswer': 1,
      'explanation': 'Lon n√™n r·ª≠a s·∫°ch, l√†m ph·∫≥ng ƒë·ªÉ ti·∫øt ki·ªám kh√¥ng gian v√† d·ªÖ t√°i ch·∫ø.',
    });

    await db.insert('questions', {
      'lessonId': 8,
      'question': 'Th·ªùi gian ph√¢n h·ªßy c·ªßa gi·∫•y bao l√¢u?',
      'options': '2-4 tu·∫ßn|||2-6 th√°ng|||5-10 nƒÉm|||100 nƒÉm',
      'correctAnswer': 1,
      'explanation': 'Gi·∫•y ph√¢n h·ªßy trong 2-6 th√°ng, nhanh h∆°n nhi·ªÅu so v·ªõi nh·ª±a (h√†ng trƒÉm nƒÉm).',
    });

    await db.insert('questions', {
      'lessonId': 8,
      'question': 'H·ªôp x·ªëp (foam) c√≥ t√°i ch·∫ø ƒë∆∞·ª£c kh√¥ng?',
      'options': 'D·ªÖ t√°i ch·∫ø|||R·∫•t kh√≥ t√°i ch·∫ø|||Kh√¥ng c·∫ßn t√°i ch·∫ø|||T·ªët nh·∫•t',
      'correctAnswer': 1,
      'explanation': 'H·ªôp x·ªëp r·∫•t kh√≥ t√°i ch·∫ø, n√™n h·∫°n ch·∫ø s·ª≠ d·ª•ng v√† thay b·∫±ng h·ªôp gi·∫•y.',
    });

    await db.insert('questions', {
      'lessonId': 8,
      'question': 'T√°i ch·∫ø 1 t·∫•n gi·∫•y ti·∫øt ki·ªám ƒë∆∞·ª£c g√¨?',
      'options': 'Kh√¥ng ti·∫øt ki·ªám|||C·ª©u 17 c√¢y, ti·∫øt ki·ªám n∆∞·ªõc/ƒëi·ªán|||Ch·ªâ ti·∫øt ki·ªám ti·ªÅn|||H·∫°i m√¥i tr∆∞·ªùng',
      'correctAnswer': 1,
      'explanation': 'T√°i ch·∫ø 1 t·∫•n gi·∫•y c·ª©u 17 c√¢y, ti·∫øt ki·ªám 26,000 l√≠t n∆∞·ªõc v√† 4,000 kWh ƒëi·ªán.',
    });

    await db.insert('questions', {
      'lessonId': 8,
      'question': 'Chai th·ªßy tinh c√≥ th·ªÉ t√°i ch·∫ø bao nhi√™u l·∫ßn?',
      'options': '1 l·∫ßn|||5 l·∫ßn|||V√¥ s·ªë l·∫ßn|||Kh√¥ng t√°i ch·∫ø ƒë∆∞·ª£c',
      'correctAnswer': 2,
      'explanation': 'Th·ªßy tinh c√≥ th·ªÉ t√°i ch·∫ø v√¥ s·ªë l·∫ßn kh√¥ng m·∫•t ch·∫•t l∆∞·ª£ng, r·∫•t b·ªÅn v·ªØng.',
    });

    // Questions for Lesson 9 (Zero Waste lifestyle)
    await db.insert('questions', {
      'lessonId': 9,
      'question': 'R ƒë·∫ßu ti√™n trong nguy√™n t·∫Øc 5R l√† g√¨?',
      'options': 'Recycle (T√°i ch·∫ø)|||Reuse (T√°i s·ª≠ d·ª•ng)|||Refuse (T·ª´ ch·ªëi)|||Reduce (Gi·∫£m thi·ªÉu)',
      'correctAnswer': 2,
      'explanation': 'Refuse (T·ª´ ch·ªëi) l√† b∆∞·ªõc ƒë·∫ßu ti√™n - t·ª´ ch·ªëi nh·ªØng th·ª© kh√¥ng c·∫ßn thi·∫øt nh∆∞ t√∫i ni l√¥ng, ·ªëng h√∫t nh·ª±a.',
    });

    await db.insert('questions', {
      'lessonId': 9,
      'question': 'H√†nh ƒë·ªông n√†o th·ªÉ hi·ªán "Reuse" (T√°i s·ª≠ d·ª•ng)?',
      'options': 'Mua ƒë·ªì m·ªõi li√™n t·ª•c|||V·ª©t b·ªè ƒë·ªì c≈©|||S·ª≠a ch·ªØa v√† d√πng l·∫°i|||ƒê·ªët r√°c',
      'correctAnswer': 2,
      'explanation': 'S·ª≠a ch·ªØa v√† d√πng l·∫°i ƒë·ªì c≈© l√† Reuse, gi·∫£m r√°c th·∫£i v√† ti·∫øt ki·ªám t√†i nguy√™n.',
    });

    await db.insert('questions', {
      'lessonId': 9,
      'question': '"Rot" trong 5R nghƒ©a l√† g√¨?',
      'options': '·ª¶ ph√¢n h·ªØu c∆°|||V·ª©t b·ªè|||ƒê·ªët r√°c|||Ch√¥n l·∫•p',
      'correctAnswer': 0,
      'explanation': 'Rot l√† ·ªß r√°c h·ªØu c∆° th√†nh ph√¢n compost, t·ªët cho m√¥i tr∆∞·ªùng v√† c√¢y tr·ªìng.',
    });

    await db.insert('questions', {
      'lessonId': 9,
      'question': 'C·ª≠a h√†ng Zero Waste b√°n g√¨?',
      'options': 'ƒê·ªì ƒë√≥ng g√≥i s·∫µn|||S·∫£n ph·∫©m b√°n l·∫ª, kh√¥ng bao b√¨|||Ch·ªâ nh·ª±a|||ƒê·ªì d√πng m·ªôt l·∫ßn',
      'correctAnswer': 1,
      'explanation': 'C·ª≠a h√†ng Zero Waste b√°n s·∫£n ph·∫©m r·ªùi, kh√°ch mang h·ªôp/t√∫i ƒë·ª±ng, kh√¥ng bao b√¨.',
    });

    await db.insert('questions', {
      'lessonId': 9,
      'question': 'Minimalism (t·ªëi gi·∫£n) li√™n quan Zero Waste th·∫ø n√†o?',
      'options': 'Kh√¥ng li√™n quan|||C√πng gi·∫£m ti√™u d√πng, r√°c th·∫£i|||Tr√°i ng∆∞·ª£c|||Ch·ªâ v·ªÅ thi·∫øt k·∫ø',
      'correctAnswer': 1,
      'explanation': 'Minimalism khuy·∫øn kh√≠ch s·ªëng t·ªëi gi·∫£n, gi·∫£m ti√™u d√πng, √≠t r√°c th·∫£i, ph√π h·ª£p Zero Waste.',
    });

    await db.insert('questions', {
      'lessonId': 9,
      'question': 'Beeswax wrap l√† g√¨?',
      'options': 'T√∫i nh·ª±a|||M√†ng b·∫£o qu·∫£n th·ª±c ph·∫©m t·ª´ s√°p ong|||Gi·∫•y g√≥i|||H·ªôp nh·ª±a',
      'correctAnswer': 1,
      'explanation': 'Beeswax wrap l√† v·∫£i t·∫©m s√°p ong, d√πng b·ªçc th·ª©c ƒÉn thay m√†ng b·ªçc nh·ª±a, t√°i s·ª≠ d·ª•ng ƒë∆∞·ª£c.',
    });

    await db.insert('questions', {
      'lessonId': 9,
      'question': 'Bulk buying (mua s·ªë l∆∞·ª£ng l·ªõn) gi√∫p gi·∫£m r√°c th·∫ø n√†o?',
      'options': 'TƒÉng r√°c|||Gi·∫£m bao b√¨|||Kh√¥ng gi√∫p|||G√¢y l√£ng ph√≠',
      'correctAnswer': 1,
      'explanation': 'Mua s·ªë l∆∞·ª£ng l·ªõn gi·∫£m bao b√¨ ƒë√≥ng g√≥i, ti·∫øt ki·ªám v√† gi·∫£m r√°c th·∫£i nh·ª±a.',
    });

    await db.insert('questions', {
      'lessonId': 9,
      'question': 'Secondhand (ƒë·ªì c≈©) c√≥ l·ª£i g√¨?',
      'options': 'Ch·∫•t l∆∞·ª£ng k√©m|||Gi·∫£m s·∫£n xu·∫•t m·ªõi, √≠t r√°c th·∫£i|||ƒê·∫Øt h∆°n|||Kh√¥ng t·ªët',
      'correctAnswer': 1,
      'explanation': 'Mua ƒë·ªì c≈© gi·∫£m nhu c·∫ßu s·∫£n xu·∫•t m·ªõi, ti·∫øt ki·ªám t√†i nguy√™n v√† gi·∫£m r√°c th·∫£i.',
    });

    await db.insert('questions', {
      'lessonId': 9,
      'question': 'DIY (t·ª± l√†m) s·∫£n ph·∫©m Zero Waste gi√∫p g√¨?',
      'options': 'L√£ng ph√≠ th·ªùi gian|||Ki·ªÉm so√°t th√†nh ph·∫ßn, kh√¥ng bao b√¨|||T·ªën k√©m h∆°n|||Kh√≥ khƒÉn',
      'correctAnswer': 1,
      'explanation': 'T·ª± l√†m s·∫£n ph·∫©m (x√† ph√≤ng, n∆∞·ªõc r·ª≠a) gi√∫p ki·ªÉm so√°t th√†nh ph·∫ßn, kh√¥ng bao b√¨ nh·ª±a.',
    });

    // Questions for Lesson 10 (Renewable energy)
    await db.insert('questions', {
      'lessonId': 10,
      'question': 'Lo·∫°i nƒÉng l∆∞·ª£ng n√†o l√† nƒÉng l∆∞·ª£ng t√°i t·∫°o?',
      'options': 'Than ƒë√°|||D·∫ßu m·ªè|||NƒÉng l∆∞·ª£ng m·∫∑t tr·ªùi|||Kh√≠ ƒë·ªët',
      'correctAnswer': 2,
      'explanation': 'NƒÉng l∆∞·ª£ng m·∫∑t tr·ªùi l√† nƒÉng l∆∞·ª£ng t√°i t·∫°o, s·∫°ch v√† kh√¥ng bao gi·ªù c·∫°n ki·ªát.',
    });

    await db.insert('questions', {
      'lessonId': 10,
      'question': 'L·ª£i √≠ch c·ªßa nƒÉng l∆∞·ª£ng t√°i t·∫°o l√† g√¨?',
      'options': 'G√¢y √¥ nhi·ªÖm|||C·∫°n ki·ªát nhanh|||Gi·∫£m kh√≠ nh√† k√≠nh|||Gi√° r·∫ª ngay l·∫≠p t·ª©c',
      'correctAnswer': 2,
      'explanation': 'NƒÉng l∆∞·ª£ng t√°i t·∫°o gi·∫£m ph√°t th·∫£i kh√≠ nh√† k√≠nh, b·∫£o v·ªá m√¥i tr∆∞·ªùng l√¢u d√†i.',
    });

    await db.insert('questions', {
      'lessonId': 10,
      'question': 'NƒÉng l∆∞·ª£ng gi√≥ hi·ªáu qu·∫£ nh·∫•t ·ªü ƒë√¢u?',
      'options': 'V√πng kh√¥ng gi√≥|||V√πng gi√≥ y·∫øu|||V√πng gi√≥ m·∫°nh|||D∆∞·ªõi l√≤ng ƒë·∫•t',
      'correctAnswer': 2,
      'explanation': 'Tuabin gi√≥ ho·∫°t ƒë·ªông hi·ªáu qu·∫£ nh·∫•t ·ªü v√πng c√≥ gi√≥ m·∫°nh v√† ·ªïn ƒë·ªãnh.',
    });

    await db.insert('questions', {
      'lessonId': 10,
      'question': 'NƒÉng l∆∞·ª£ng ƒë·ªãa nhi·ªát l·∫•y t·ª´ ƒë√¢u?',
      'options': 'M·∫∑t tr·ªùi|||Nhi·ªát t·ª´ l√≤ng ƒë·∫•t|||Gi√≥|||N∆∞·ªõc',
      'correctAnswer': 1,
      'explanation': 'NƒÉng l∆∞·ª£ng ƒë·ªãa nhi·ªát khai th√°c nhi·ªát t·ª´ l√≤ng ƒë·∫•t, ·ªïn ƒë·ªãnh v√† s·∫°ch.',
    });

    await db.insert('questions', {
      'lessonId': 10,
      'question': 'Pin m·∫∑t tr·ªùi ho·∫°t ƒë·ªông khi n√†o?',
      'options': 'Ch·ªâ ban ng√†y c√≥ n·∫Øng|||C·∫£ ng√†y l·∫´n ƒë√™m|||Ch·ªâ ban ƒë√™m|||Kh√¥ng ho·∫°t ƒë·ªông',
      'correctAnswer': 0,
      'explanation': 'Pin m·∫∑t tr·ªùi chuy·ªÉn √°nh s√°ng th√†nh ƒëi·ªán, ho·∫°t ƒë·ªông khi c√≥ n·∫Øng. Ban ƒë√™m d√πng ƒëi·ªán t·ª´ pin l∆∞u tr·ªØ.',
    });

    await db.insert('questions', {
      'lessonId': 10,
      'question': 'Nh√† m√°y th·ªßy ƒëi·ªán nh·ªè c√≥ l·ª£i g√¨?',
      'options': 'G√¢y h·∫°i|||√çt t√°c ƒë·ªông m√¥i tr∆∞·ªùng, nƒÉng l∆∞·ª£ng s·∫°ch|||ƒê·∫Øt v√¥ √≠ch|||G√¢y l≈©',
      'correctAnswer': 1,
      'explanation': 'Th·ªßy ƒëi·ªán nh·ªè √≠t t√°c ƒë·ªông m√¥i tr∆∞·ªùng, cung c·∫•p ƒëi·ªán s·∫°ch cho v√πng s√¢u, v√πng xa.',
    });

    await db.insert('questions', {
      'lessonId': 10,
      'question': 'Biogas (kh√≠ sinh h·ªçc) l√†m t·ª´ g√¨?',
      'options': 'D·∫ßu m·ªè|||Ch·∫•t th·∫£i h·ªØu c∆°, ph√¢n gia s√∫c|||Than ƒë√°|||Kh√≠ ƒë·ªët',
      'correctAnswer': 1,
      'explanation': 'Biogas t·ª´ ph√¢n h·ªßy ch·∫•t th·∫£i h·ªØu c∆°, ph√¢n gia s√∫c, cung c·∫•p kh√≠ ƒëun n·∫•u v√† ƒëi·ªán.',
    });

    await db.insert('questions', {
      'lessonId': 10,
      'question': 'NƒÉng l∆∞·ª£ng s√≥ng bi·ªÉn c√≥ ti·ªÅm nƒÉng ·ªü Vi·ªát Nam kh√¥ng?',
      'options': 'Kh√¥ng|||R·∫•t l·ªõn (3000km b·ªù bi·ªÉn)|||Kh√¥ng ph√π h·ª£p|||Ch·ªâ ·ªü n∆∞·ªõc ngo√†i',
      'correctAnswer': 1,
      'explanation': 'Vi·ªát Nam c√≥ 3000km b·ªù bi·ªÉn, ti·ªÅm nƒÉng nƒÉng l∆∞·ª£ng s√≥ng v√† gi√≥ bi·ªÉn r·∫•t l·ªõn.',
    });

    await db.insert('questions', {
      'lessonId': 10,
      'question': 'T·∫°i sao c·∫ßn l∆∞u tr·ªØ nƒÉng l∆∞·ª£ng t√°i t·∫°o?',
      'options': 'Kh√¥ng c·∫ßn|||NƒÉng l∆∞·ª£ng kh√¥ng ·ªïn ƒë·ªãnh (n·∫Øng, gi√≥)|||L√£ng ph√≠|||Kh√¥ng d√πng ƒë∆∞·ª£c',
      'correctAnswer': 1,
      'explanation': 'NƒÉng l∆∞·ª£ng t√°i t·∫°o ph·ª• thu·ªôc th·ªùi ti·∫øt, c·∫ßn l∆∞u tr·ªØ (pin, b∆°m n∆∞·ªõc) ƒë·ªÉ d√πng khi kh√¥ng c√≥ n·∫Øng/gi√≥.',
    });

    // Questions for Lesson 11 (Building energy efficiency)
    await db.insert('questions', {
      'lessonId': 11,
      'question': 'T√≤a nh√† ti√™u th·ª• bao nhi√™u % nƒÉng l∆∞·ª£ng to√†n c·∫ßu?',
      'options': '10%|||20%|||40%|||60%',
      'correctAnswer': 2,
      'explanation': 'T√≤a nh√† ti√™u th·ª• kho·∫£ng 40% nƒÉng l∆∞·ª£ng to√†n c·∫ßu, c·∫ßn thi·∫øt k·∫ø hi·ªáu qu·∫£ ƒë·ªÉ ti·∫øt ki·ªám.',
    });

    await db.insert('questions', {
      'lessonId': 11,
      'question': 'Thi·∫øt k·∫ø n√†o gi√∫p t√≤a nh√† ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng?',
      'options': 'C·ª≠a s·ªï nh·ªè|||Kh√¥ng c√≥ m√°i che|||C·ª≠a s·ªï l·ªõn t·∫≠n d·ª•ng √°nh s√°ng t·ª± nhi√™n|||Kh√¥ng c√°ch nhi·ªát',
      'correctAnswer': 2,
      'explanation': 'C·ª≠a s·ªï l·ªõn gi√∫p t·∫≠n d·ª•ng √°nh s√°ng t·ª± nhi√™n, gi·∫£m s·ª≠ d·ª•ng ƒë√®n ƒëi·ªán, ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng.',
    });

    await db.insert('questions', {
      'lessonId': 11,
      'question': 'Ch·ª©ng nh·∫≠n t√≤a nh√† xanh ·ªü Vi·ªát Nam l√†?',
      'options': 'LEED|||LOTUS|||Energy Star|||BREEAM',
      'correctAnswer': 1,
      'explanation': 'LOTUS l√† ti√™u chu·∫©n ƒë√°nh gi√° t√≤a nh√† xanh c·ªßa Vi·ªát Nam, gi√∫p ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng 20-50%.',
    });

    await db.insert('questions', {
      'lessonId': 11,
      'question': 'M√°i xanh (green roof) c√≥ l·ª£i g√¨?',
      'options': 'Ch·ªâ ƒë·∫πp|||C√°ch nhi·ªát, h·∫•p th·ª• m∆∞a|||T·ªën k√©m v√¥ √≠ch|||G√¢y r√≤ r·ªâ',
      'correctAnswer': 1,
      'explanation': 'M√°i xanh c√°ch nhi·ªát, gi·∫£m 20-30% chi ph√≠ ƒëi·ªÅu h√≤a, h·∫•p th·ª• n∆∞·ªõc m∆∞a, gi·∫£m l≈© ƒë√¥ th·ªã.',
    });

    await db.insert('questions', {
      'lessonId': 11,
      'question': 'K√≠nh Low-E gi√∫p ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng th·∫ø n√†o?',
      'options': 'Kh√¥ng gi√∫p|||Ph·∫£n x·∫° nhi·ªát, gi·ªØ m√°t/·∫•m|||Ch·ªâ ƒë·∫πp|||ƒê·∫Øt kh√¥ng hi·ªáu qu·∫£',
      'correctAnswer': 1,
      'explanation': 'K√≠nh Low-E ph·∫£n x·∫° tia h·ªìng ngo·∫°i, gi·ªØ m√°t m√πa h√®/·∫•m m√πa ƒë√¥ng, ti·∫øt ki·ªám ƒëi·ªÅu h√≤a 30%.',
    });

    await db.insert('questions', {
      'lessonId': 11,
      'question': 'C·∫£m bi·∫øn chuy·ªÉn ƒë·ªông ƒë√®n c√≥ √≠ch g√¨?',
      'options': 'Kh√¥ng c·∫ßn thi·∫øt|||T·ª± ƒë·ªông b·∫≠t/t·∫Øt, ti·∫øt ki·ªám ƒëi·ªán|||G√¢y phi·ªÅn|||ƒê·∫Øt ƒë·ªè',
      'correctAnswer': 1,
      'explanation': 'C·∫£m bi·∫øn t·ª± ƒë·ªông t·∫Øt ƒë√®n khi kh√¥ng c√≥ ng∆∞·ªùi, ti·∫øt ki·ªám 30-50% ƒëi·ªán chi·∫øu s√°ng.',
    });

    await db.insert('questions', {
      'lessonId': 11,
      'question': 'H∆∞·ªõng t√≤a nh√† n√†o t·ªët nh·∫•t ·ªü Vi·ªát Nam?',
      'options': 'H∆∞·ªõng T√¢y|||H∆∞·ªõng ƒê√¥ng/ƒê√¥ng Nam|||H∆∞·ªõng B·∫Øc|||Kh√¥ng quan tr·ªçng',
      'correctAnswer': 1,
      'explanation': 'H∆∞·ªõng ƒê√¥ng/ƒê√¥ng Nam ƒë√≥n gi√≥ m√°t, tr√°nh n·∫Øng T√¢y n√≥ng, gi·∫£m ƒëi·ªÅu h√≤a.',
    });

    await db.insert('questions', {
      'lessonId': 11,
      'question': 'Thang m√°y ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng c√≥ g√¨ ƒë·∫∑c bi·ªát?',
      'options': 'Kh√¥ng kh√°c|||H·ªìi sinh nƒÉng l∆∞·ª£ng khi xu·ªëng|||Ch·∫≠m h∆°n|||Kh√¥ng an to√†n',
      'correctAnswer': 1,
      'explanation': 'Thang m√°y regenerative h·ªìi sinh nƒÉng l∆∞·ª£ng khi xu·ªëng, ti·∫øt ki·ªám t·ªõi 40% ƒëi·ªán.',
    });

    await db.insert('questions', {
      'lessonId': 11,
      'question': 'V·∫≠t li·ªáu c√°ch nhi·ªát t·ªët nh·∫•t l√†?',
      'options': 'Kim lo·∫°i|||B√™ t√¥ng|||B√¥ng th·ªßy tinh, x·ªëp EPS|||G·ªó',
      'correctAnswer': 2,
      'explanation': 'B√¥ng th·ªßy tinh, x·ªëp EPS c√°ch nhi·ªát r·∫•t t·ªët, gi·∫£m nhi·ªát ƒë·ªô trong nh√† 5-8¬∞C.',
    });

    await db.insert('questions', {
      'lessonId': 11,
      'question': 'BMS (Building Management System) l√† g√¨?',
      'options': 'H·ªá th·ªëng trang tr√≠|||H·ªá th·ªëng qu·∫£n l√Ω t√≤a nh√† th√¥ng minh|||H·ªá th·ªëng b√°o ch√°y|||Kh√¥ng quan tr·ªçng',
      'correctAnswer': 1,
      'explanation': 'BMS t·ª± ƒë·ªông ƒëi·ªÅu khi·ªÉn ƒëi·ªán, n∆∞·ªõc, ƒëi·ªÅu h√≤a t·ªëi ∆∞u, ti·∫øt ki·ªám 20-40% nƒÉng l∆∞·ª£ng.',
    });

    // Questions for Lesson 12 (Greenhouse gases)
    await db.insert('questions', {
      'lessonId': 12,
      'question': 'Kh√≠ nh√† k√≠nh chi·∫øm t·ª∑ l·ªá l·ªõn nh·∫•t l√†?',
      'options': 'CH4 (Methane)|||N2O (Nitrous oxide)|||CO2 (Carbon dioxide)|||O2 (Oxygen)',
      'correctAnswer': 2,
      'explanation': 'CO2 chi·∫øm 76% t·ªïng l∆∞·ª£ng kh√≠ nh√† k√≠nh, ch·ªß y·∫øu t·ª´ ƒë·ªët nhi√™n li·ªáu h√≥a th·∫°ch.',
    });

    await db.insert('questions', {
      'lessonId': 12,
      'question': 'Kh√≠ methane (CH4) ch·ªß y·∫øu t·ª´ ƒë√¢u?',
      'options': 'Xe h∆°i|||ChƒÉn nu√¥i v√† ru·ªông l√∫a|||M√°y bay|||M√°y t√≠nh',
      'correctAnswer': 1,
      'explanation': 'Methane ch·ªß y·∫øu t·ª´ chƒÉn nu√¥i (b√≤, tr√¢u) v√† ru·ªông l√∫a, m·∫°nh g·∫•p 25 l·∫ßn CO2.',
    });

    await db.insert('questions', {
      'lessonId': 12,
      'question': 'C√°ch n√†o gi·∫£m ph√°t th·∫£i kh√≠ nh√† k√≠nh?',
      'options': 'ƒê·ªët than|||Ph√° r·ª´ng|||ƒÇn √≠t th·ªãt, nhi·ªÅu th·ª±c v·∫≠t|||TƒÉng chƒÉn nu√¥i',
      'correctAnswer': 2,
      'explanation': 'ƒÇn √≠t th·ªãt gi·∫£m nhu c·∫ßu chƒÉn nu√¥i, t·ª´ ƒë√≥ gi·∫£m ph√°t th·∫£i methane v√† CO2.',
    });

    await db.insert('questions', {
      'lessonId': 12,
      'question': 'SF6 l√† kh√≠ nh√† k√≠nh g√¨?',
      'options': 'Y·∫øu nh·∫•t|||M·∫°nh nh·∫•t (g·∫•p 23,000 l·∫ßn CO2)|||Trung b√¨nh|||Kh√¥ng ph·∫£i kh√≠ nh√† k√≠nh',
      'correctAnswer': 1,
      'explanation': 'SF6 (sulfur hexafluoride) l√† kh√≠ nh√† k√≠nh m·∫°nh nh·∫•t, m·∫°nh g·∫•p 23,000 l·∫ßn CO2, d√πng trong ƒëi·ªán.',
    });

    await db.insert('questions', {
      'lessonId': 12,
      'question': 'Carbon footprint l√† g√¨?',
      'options': 'D·∫•u ch√¢n|||L∆∞·ª£ng CO2 m·ªôt ng∆∞·ªùi/t·ªï ch·ª©c th·∫£i ra|||B√†n ch√¢n to|||Kh√¥ng li√™n quan',
      'correctAnswer': 1,
      'explanation': 'Carbon footprint l√† t·ªïng l∆∞·ª£ng kh√≠ nh√† k√≠nh (t√≠nh b·∫±ng CO2) m·ªôt ng∆∞·ªùi/t·ªï ch·ª©c th·∫£i ra.',
    });

    await db.insert('questions', {
      'lessonId': 12,
      'question': 'ƒÇn th·ªãt b√≤ th·∫£i bao nhi√™u kg CO2/kg th·ªãt?',
      'options': '1-2 kg|||5-10 kg|||27 kg|||100 kg',
      'correctAnswer': 2,
      'explanation': 'S·∫£n xu·∫•t 1 kg th·ªãt b√≤ th·∫£i kho·∫£ng 27 kg CO2, cao g·∫•p 10 l·∫ßn rau c·ªß.',
    });

    await db.insert('questions', {
      'lessonId': 12,
      'question': 'C√°ch n√†o gi·∫£m carbon footprint khi ƒëi l·∫°i?',
      'options': 'L√°i xe m·ªôt m√¨nh|||Xe bu√Ωt, xe ƒë·∫°p, ƒëi chung|||Bay m√°y bay nhi·ªÅu|||Mua xe to',
      'correctAnswer': 1,
      'explanation': 'Xe bu√Ωt, xe ƒë·∫°p, ƒëi chung xe gi·∫£m 50-90% kh√≠ th·∫£i so v·ªõi l√°i xe ri√™ng.',
    });

    await db.insert('questions', {
      'lessonId': 12,
      'question': 'Mua h√†ng local (ƒë·ªãa ph∆∞∆°ng) gi·∫£m kh√≠ th·∫£i th·∫ø n√†o?',
      'options': 'Kh√¥ng gi·∫£m|||Gi·∫£m v·∫≠n chuy·ªÉn, √≠t CO2|||TƒÉng kh√≠ th·∫£i|||Kh√¥ng li√™n quan',
      'correctAnswer': 1,
      'explanation': 'H√†ng ƒë·ªãa ph∆∞∆°ng gi·∫£m v·∫≠n chuy·ªÉn xa, ti·∫øt ki·ªám nhi√™n li·ªáu v√† gi·∫£m CO2.',
    });

    await db.insert('questions', {
      'lessonId': 12,
      'question': 'CFC (chlorofluorocarbons) g√¢y h·∫°i g√¨?',
      'options': 'T·ªët cho m√¥i tr∆∞·ªùng|||Ph√° h·ªßy t·∫ßng ozon|||Kh√¥ng h·∫°i|||T·∫°o oxy',
      'correctAnswer': 1,
      'explanation': 'CFC ph√° h·ªßy t·∫ßng ozon, ƒë√£ b·ªã c·∫•m s·ª≠ d·ª•ng trong ƒëi·ªÅu h√≤a, t·ªß l·∫°nh.',
    });

    await db.insert('questions', {
      'lessonId': 12,
      'question': 'Carbon offset l√† g√¨?',
      'options': 'TƒÉng ph√°t th·∫£i|||B√π tr·ª´ carbon (tr·ªìng c√¢y, ƒë·∫ßu t∆∞ xanh)|||ƒê·ªët ch√°y|||Kh√¥ng l√†m g√¨',
      'correctAnswer': 1,
      'explanation': 'Carbon offset l√† b√π tr·ª´ kh√≠ th·∫£i b·∫±ng c√°ch tr·ªìng c√¢y, ƒë·∫ßu t∆∞ d·ª± √°n xanh.',
    });

    // Questions for Lesson 13 (Climate adaptation)
    await db.insert('questions', {
      'lessonId': 13,
      'question': 'Th√≠ch ·ª©ng v·ªõi bi·∫øn ƒë·ªïi kh√≠ h·∫≠u nghƒ©a l√† g√¨?',
      'options': 'L√†m kh√≠ h·∫≠u thay ƒë·ªïi nhanh h∆°n|||B·ªè m·∫∑c kh√¥ng l√†m g√¨|||ƒêi·ªÅu ch·ªânh ƒë·ªÉ s·ªëng v·ªõi t√°c ƒë·ªông|||TƒÉng ph√°t th·∫£i',
      'correctAnswer': 2,
      'explanation': 'Th√≠ch ·ª©ng l√† ƒëi·ªÅu ch·ªânh c√°ch s·ªëng v√† s·∫£n xu·∫•t ƒë·ªÉ ƒë·ªëi ph√≥ v·ªõi t√°c ƒë·ªông c·ªßa bi·∫øn ƒë·ªïi kh√≠ h·∫≠u.',
    });

    await db.insert('questions', {
      'lessonId': 13,
      'question': 'Gi·∫£i ph√°p th√≠ch ·ª©ng v·ªõi h·∫°n h√°n l√†?',
      'options': 'D√πng nhi·ªÅu n∆∞·ªõc h∆°n|||Tr·ªìng c√¢y ch·ªëng h·∫°n, t∆∞·ªõi ti·∫øt ki·ªám|||Ph√° r·ª´ng|||Kh√¥ng l√†m g√¨',
      'correctAnswer': 1,
      'explanation': 'Tr·ªìng gi·ªëng c√¢y ch·ªëng h·∫°n v√† h·ªá th·ªëng t∆∞·ªõi ti·∫øt ki·ªám n∆∞·ªõc gi√∫p th√≠ch ·ª©ng v·ªõi h·∫°n h√°n.',
    });

    await db.insert('questions', {
      'lessonId': 13,
      'question': 'C√° nh√¢n c√≥ th·ªÉ th√≠ch ·ª©ng v·ªõi bi·∫øn ƒë·ªïi kh√≠ h·∫≠u b·∫±ng c√°ch?',
      'options': 'B·ªè m·∫∑c|||D·ª± tr·ªØ n∆∞·ªõc, l∆∞∆°ng th·ª±c|||L√£ng ph√≠ t√†i nguy√™n|||Kh√¥ng quan t√¢m',
      'correctAnswer': 1,
      'explanation': 'D·ª± tr·ªØ n∆∞·ªõc, l∆∞∆°ng th·ª±c gi√∫p c√° nh√¢n s·∫µn s√†ng ·ª©ng ph√≥ v·ªõi thi√™n tai v√† kh√≠ h·∫≠u c·ª±c ƒëoan.',
    });

    await db.insert('questions', {
      'lessonId': 13,
      'question': 'K·∫øt c·∫•u ch·ªëng b√£o cho nh√† ·ªü v√πng ven bi·ªÉn?',
      'options': 'Nh√† th·∫•p, y·∫øu|||M√≥ng s√¢u, m√°i ch·∫Øc, c·ªôt th√©p|||Kh√¥ng c·∫ßn|||Nh√† g·ªó nh·∫π',
      'correctAnswer': 1,
      'explanation': 'Nh√† m√≥ng s√¢u, m√°i ch·∫Øc, c·ªôt th√©p ch·ªãu ƒë∆∞·ª£c gi√≥ b√£o m·∫°nh, b·∫£o v·ªá ng∆∞·ªùi d√¢n.',
    });

    await db.insert('questions', {
      'lessonId': 13,
      'question': 'H·ªá th·ªëng t∆∞·ªõi nh·ªè gi·ªçt gi√∫p g√¨ trong h·∫°n h√°n?',
      'options': 'L√£ng ph√≠ n∆∞·ªõc|||Ti·∫øt ki·ªám 50-70% n∆∞·ªõc|||Kh√¥ng hi·ªáu qu·∫£|||ƒê·∫Øt ƒë·ªè v√¥ √≠ch',
      'correctAnswer': 1,
      'explanation': 'T∆∞·ªõi nh·ªè gi·ªçt ƒë∆∞a n∆∞·ªõc tr·ª±c ti·∫øp ƒë·∫øn r·ªÖ, ti·∫øt ki·ªám 50-70% n∆∞·ªõc, hi·ªáu qu·∫£ cao.',
    });

    await db.insert('questions', {
      'lessonId': 13,
      'question': 'Gi·ªëng c√¢y ch·ªëng h·∫°n l√†?',
      'options': 'L√∫a n∆∞·ªõc|||Ng√¥, khoai, c√¢y ƒÉn qu·∫£ ch·ªãu h·∫°n|||Rau m√†u|||Ch·ªâ c√≥ c·ªè',
      'correctAnswer': 1,
      'explanation': 'Ng√¥, khoai, c√¢y ƒÉn qu·∫£ ch·ªãu h·∫°n gi√∫p n√¥ng d√¢n duy tr√¨ s·∫£n xu·∫•t khi thi·∫øu n∆∞·ªõc.',
    });

    await db.insert('questions', {
      'lessonId': 13,
      'question': 'H·ªá th·ªëng c·∫£nh b√°o s·ªõm thi√™n tai gi√∫p g√¨?',
      'options': 'Kh√¥ng gi√∫p|||S∆° t√°n k·ªãp th·ªùi, gi·∫£m thi·ªát h·∫°i|||G√¢y ho·∫£ng lo·∫°n|||T·ªën k√©m',
      'correctAnswer': 1,
      'explanation': 'C·∫£nh b√°o s·ªõm gi√∫p ng∆∞·ªùi d√¢n s∆° t√°n, chu·∫©n b·ªã, gi·∫£m thi·ªát h·∫°i v·ªÅ ng∆∞·ªùi v√† t√†i s·∫£n.',
    });

    await db.insert('questions', {
      'lessonId': 13,
      'question': 'ƒê√™ bi·ªÉn, k√® ch·ªëng s√≥ng c√≥ t√°c d·ª•ng g√¨?',
      'options': 'Ch·ªâ trang tr√≠|||Ch·ªëng x√≥i m√≤n, s√≥ng bi·ªÉn d√¢ng|||G√¢y ng·∫≠p|||Kh√¥ng c·∫ßn thi·∫øt',
      'correctAnswer': 1,
      'explanation': 'ƒê√™ bi·ªÉn, k√® ngƒÉn s√≥ng, ch·ªëng x√≥i m√≤n b·ªù bi·ªÉn, b·∫£o v·ªá v√πng ven bi·ªÉn kh·ªèi ng·∫≠p.',
    });

    await db.insert('questions', {
      'lessonId': 13,
      'question': 'B·∫£o hi·ªÉm thi√™n tai gi√∫p g√¨?',
      'options': 'Kh√¥ng gi√∫p|||B·ªìi th∆∞·ªùng thi·ªát h·∫°i, ph·ª•c h·ªìi nhanh|||L√£ng ph√≠ ti·ªÅn|||Kh√¥ng c·∫ßn',
      'correctAnswer': 1,
      'explanation': 'B·∫£o hi·ªÉm thi√™n tai gi√∫p b·ªìi th∆∞·ªùng thi·ªát h·∫°i, ng∆∞·ªùi d√¢n ph·ª•c h·ªìi nhanh sau thi√™n tai.',
    });

    await db.insert('questions', {
      'lessonId': 13,
      'question': 'X√¢y d·ª±ng h·ªì ch·ª©a n∆∞·ªõc gi√∫p g√¨ khi h·∫°n h√°n?',
      'options': 'Kh√¥ng gi√∫p|||D·ª± tr·ªØ n∆∞·ªõc m√πa m∆∞a, d√πng m√πa kh√¥|||G√¢y l≈©|||L√£ng ph√≠ ƒë·∫•t',
      'correctAnswer': 1,
      'explanation': 'H·ªì ch·ª©a d·ª± tr·ªØ n∆∞·ªõc m√πa m∆∞a, cung c·∫•p cho n√¥ng nghi·ªáp v√† sinh ho·∫°t m√πa kh√¥.',
    });

    // Questions for Lesson 14 (Biodiversity)
    await db.insert('questions', {
      'lessonId': 14,
      'question': 'Bao nhi√™u lo√†i ƒëang c√≥ nguy c∆° tuy·ªát ch·ªßng?',
      'options': '1,000 lo√†i|||10,000 lo√†i|||100,000 lo√†i|||1 tri·ªáu lo√†i',
      'correctAnswer': 3,
      'explanation': 'Kho·∫£ng 1 tri·ªáu lo√†i ƒëang c√≥ nguy c∆° tuy·ªát ch·ªßng do ho·∫°t ƒë·ªông con ng∆∞·ªùi.',
    });

    await db.insert('questions', {
      'lessonId': 14,
      'question': 'Nguy√™n nh√¢n ch√≠nh g√¢y tuy·ªát ch·ªßng lo√†i l√†?',
      'options': 'Lo√†i gi√† t·ª± nhi√™n|||M·∫•t m√¥i tr∆∞·ªùng s·ªëng|||Lo√†i t·ª± tuy·ªát ch·ªßng|||Qu√° nhi·ªÅu lo√†i',
      'correctAnswer': 1,
      'explanation': 'M·∫•t m√¥i tr∆∞·ªùng s·ªëng do ph√° r·ª´ng, ƒë√¥ th·ªã h√≥a l√† nguy√™n nh√¢n ch√≠nh g√¢y tuy·ªát ch·ªßng.',
    });

    await db.insert('questions', {
      'lessonId': 14,
      'question': 'H√†nh ƒë·ªông n√†o b·∫£o v·ªá ƒëa d·∫°ng sinh h·ªçc?',
      'options': 'SƒÉn b·∫Øt ƒë·ªông v·∫≠t|||Ph√° r·ª´ng|||Th√†nh l·∫≠p khu b·∫£o t·ªìn|||Bu√¥n b√°n ƒë·ªông v·∫≠t',
      'correctAnswer': 2,
      'explanation': 'Th√†nh l·∫≠p khu b·∫£o t·ªìn b·∫£o v·ªá m√¥i tr∆∞·ªùng s·ªëng, gi√∫p c√°c lo√†i sinh s·ªëng v√† ph√°t tri·ªÉn.',
    });

    await db.insert('questions', {
      'lessonId': 14,
      'question': 'CITES l√† g√¨?',
      'options': 'T·ªï ch·ª©c du l·ªãch|||C√¥ng ∆∞·ªõc bu√¥n b√°n ƒë·ªông v·∫≠t hoang d√£|||H·ªôi b·∫£o v·ªá r·ª´ng|||Kh√¥ng r√µ',
      'correctAnswer': 1,
      'explanation': 'CITES l√† c√¥ng ∆∞·ªõc qu·ªëc t·∫ø ki·ªÉm so√°t bu√¥n b√°n ƒë·ªông th·ª±c v·∫≠t hoang d√£ nguy c·∫•p.',
    });

    await db.insert('questions', {
      'lessonId': 14,
      'question': 'S√°ch ƒê·ªè Vi·ªát Nam ghi g√¨?',
      'options': 'Danh s√°ch lo√†i qu√Ω hi·∫øm, nguy c·∫•p|||S√°ch n√¥ng nghi·ªáp|||S√°ch l·ªãch s·ª≠|||Truy·ªán c·ªï t√≠ch',
      'correctAnswer': 0,
      'explanation': 'S√°ch ƒê·ªè Vi·ªát Nam li·ªát k√™ c√°c lo√†i ƒë·ªông th·ª±c v·∫≠t qu√Ω hi·∫øm, nguy c·∫•p c·∫ßn b·∫£o v·ªá.',
    });

    await db.insert('questions', {
      'lessonId': 14,
      'question': 'V∆∞·ªùn qu·ªëc gia v√† khu b·∫£o t·ªìn kh√°c g√¨?',
      'options': 'Gi·ªëng nhau|||VQG l·ªõn h∆°n, ƒëa d·∫°ng h∆°n|||KBT t·ªët h∆°n|||Kh√¥ng kh√°c',
      'correctAnswer': 1,
      'explanation': 'V∆∞·ªùn qu·ªëc gia th∆∞·ªùng l·ªõn h∆°n, ƒëa d·∫°ng sinh h·ªçc cao, c√≥ du l·ªãch sinh th√°i.',
    });

    await db.insert('questions', {
      'lessonId': 14,
      'question': 'Hotspot ƒëa d·∫°ng sinh h·ªçc l√† g√¨?',
      'options': 'ƒêi·ªÉm wifi|||Khu v·ª±c ƒëa d·∫°ng cao, nguy c∆° m·∫•t m√°t l·ªõn|||N∆°i n√≥ng|||Kh√¥ng r√µ',
      'correctAnswer': 1,
      'explanation': 'Hotspot l√† khu v·ª±c c√≥ ƒëa d·∫°ng sinh h·ªçc cao nh∆∞ng ƒëang b·ªã ƒëe d·ªça nghi√™m tr·ªçng.',
    });

    await db.insert('questions', {
      'lessonId': 14,
      'question': 'Corridor sinh th√°i l√† g√¨?',
      'options': 'H√†nh lang k·∫øt n·ªëi c√°c khu b·∫£o t·ªìn|||ƒê∆∞·ªùng ƒëi|||C·ª≠a h√†ng|||Kh√¥ng r√µ',
      'correctAnswer': 0,
      'explanation': 'Corridor l√† h√†nh lang sinh th√°i n·ªëi c√°c khu b·∫£o t·ªìn, gi√∫p ƒë·ªông v·∫≠t di chuy·ªÉn an to√†n.',
    });

    await db.insert('questions', {
      'lessonId': 14,
      'question': 'Ex-situ conservation l√† g√¨?',
      'options': 'B·∫£o t·ªìn ngo√†i m√¥i tr∆∞·ªùng s·ªëng|||B·∫£o t·ªìn trong t·ª± nhi√™n|||Kh√¥ng b·∫£o t·ªìn|||SƒÉn b·∫Øt',
      'correctAnswer': 0,
      'explanation': 'Ex-situ l√† b·∫£o t·ªìn ngo√†i t·ª± nhi√™n (v∆∞·ªùn th√∫, v∆∞·ªùn th·ª±c v·∫≠t) ƒë·ªÉ c·ª©u lo√†i nguy c·∫•p.',
    });

    await db.insert('questions', {
      'lessonId': 14,
      'question': 'DNA banking c√≥ t√°c d·ª•ng g√¨?',
      'options': 'Kh√¥ng c√≥|||L∆∞u tr·ªØ gen lo√†i qu√Ω hi·∫øm|||Ng√¢n h√†ng ti·ªÅn|||Kh√¥ng li√™n quan',
      'correctAnswer': 1,
      'explanation': 'DNA banking l∆∞u tr·ªØ v·∫≠t li·ªáu di truy·ªÅn lo√†i qu√Ω hi·∫øm, ph·ª•c v·ª• nghi√™n c·ª©u v√† nh√¢n gi·ªëng.',
    });

    // Questions for Lesson 15 (Forest protection)
    await db.insert('questions', {
      'lessonId': 15,
      'question': 'M·ªói nƒÉm c√≥ bao nhi√™u ha r·ª´ng b·ªã m·∫•t?',
      'options': '1 tri·ªáu ha|||5 tri·ªáu ha|||10 tri·ªáu ha|||20 tri·ªáu ha',
      'correctAnswer': 2,
      'explanation': 'Kho·∫£ng 10 tri·ªáu ha r·ª´ng b·ªã m·∫•t m·ªói nƒÉm, t∆∞∆°ng ƒë∆∞∆°ng di·ªán t√≠ch H√†n Qu·ªëc.',
    });

    await db.insert('questions', {
      'lessonId': 15,
      'question': 'R·ª´ng l√† nh√† c·ªßa bao nhi√™u % lo√†i tr√™n c·∫°n?',
      'options': '20%|||40%|||60%|||80%',
      'correctAnswer': 3,
      'explanation': 'R·ª´ng l√† nh√† c·ªßa 80% c√°c lo√†i ƒë·ªông th·ª±c v·∫≠t tr√™n c·∫°n, c·∫ßn b·∫£o v·ªá kh·∫©n c·∫•p.',
    });

    await db.insert('questions', {
      'lessonId': 15,
      'question': 'C√°ch n√†o gi√∫p b·∫£o v·ªá r·ª´ng?',
      'options': 'S·ª≠ d·ª•ng g·ªó l·∫≠u|||Ph√° r·ª´ng l√†m ƒë·∫•t|||Tr·ªìng c√¢y g√¢y r·ª´ng|||ƒê·ªët r·ª´ng',
      'correctAnswer': 2,
      'explanation': 'Tr·ªìng c√¢y g√¢y r·ª´ng v√† tham gia c√°c ch∆∞∆°ng tr√¨nh b·∫£o v·ªá r·ª´ng gi√∫p ph·ª•c h·ªìi di·ªán t√≠ch r·ª´ng.',
    });

    await db.insert('questions', {
      'lessonId': 15,
      'question': 'REDD+ l√† g√¨?',
      'options': 'Ch∆∞∆°ng tr√¨nh tr·ªìng r·ª´ng|||Gi·∫£m ph√°t th·∫£i t·ª´ ph√° r·ª´ng|||T·ªï ch·ª©c du l·ªãch|||Kh√¥ng r√µ',
      'correctAnswer': 1,
      'explanation': 'REDD+ l√† c∆° ch·∫ø qu·ªëc t·∫ø tr·∫£ ti·ªÅn cho c√°c n∆∞·ªõc gi·∫£m ph√° r·ª´ng, b·∫£o v·ªá r·ª´ng.',
    });

    await db.insert('questions', {
      'lessonId': 15,
      'question': 'R·ª´ng nhi·ªát ƒë·ªõi chi·∫øm bao nhi√™u % di·ªán t√≠ch r·ª´ng th·∫ø gi·ªõi?',
      'options': '10%|||30%|||50%|||70%',
      'correctAnswer': 2,
      'explanation': 'R·ª´ng nhi·ªát ƒë·ªõi chi·∫øm 50% di·ªán t√≠ch r·ª´ng nh∆∞ng ch·ª©a 70% ƒëa d·∫°ng sinh h·ªçc.',
    });

    await db.insert('questions', {
      'lessonId': 15,
      'question': 'Ch·ª©ng ch·ªâ FSC tr√™n g·ªó c√≥ nghƒ©a g√¨?',
      'options': 'G·ªó r·∫ª|||G·ªó t·ª´ r·ª´ng b·ªÅn v·ªØng|||G·ªó l·∫≠u|||Kh√¥ng quan tr·ªçng',
      'correctAnswer': 1,
      'explanation': 'FSC ch·ª©ng nh·∫≠n g·ªó t·ª´ r·ª´ng qu·∫£n l√Ω b·ªÅn v·ªØng, h·ª£p ph√°p, b·∫£o v·ªá m√¥i tr∆∞·ªùng.',
    });

    await db.insert('questions', {
      'lessonId': 15,
      'question': 'Tr·ªìng r·ª´ng thay th·∫ø ƒë∆∞·ª£c r·ª´ng t·ª± nhi√™n kh√¥ng?',
      'options': 'Ho√†n to√†n|||Kh√¥ng thay th·∫ø ƒë∆∞·ª£c ƒëa d·∫°ng sinh h·ªçc|||T·ªët h∆°n|||Gi·ªëng nhau',
      'correctAnswer': 1,
      'explanation': 'R·ª´ng tr·ªìng kh√¥ng thay th·∫ø ƒë∆∞·ª£c ƒëa d·∫°ng sinh h·ªçc c·ªßa r·ª´ng t·ª± nhi√™n h√†ng trƒÉm nƒÉm tu·ªïi.',
    });

    await db.insert('questions', {
      'lessonId': 15,
      'question': 'Fire break (ƒë∆∞·ªùng bƒÉng c·∫£n l·ª≠a) trong r·ª´ng l√† g√¨?',
      'options': 'ƒê∆∞·ªùng ƒëi|||D·∫£i ƒë·∫•t tr·ªëng ngƒÉn ch√°y lan|||ƒê∆∞·ªùng tu·∫ßn tra|||B√£i ƒë·∫≠u xe',
      'correctAnswer': 1,
      'explanation': 'Fire break l√† d·∫£i ƒë·∫•t tr·ªëng kh√¥ng c√¢y, ngƒÉn ch√°y r·ª´ng lan r·ªông.',
    });

    await db.insert('questions', {
      'lessonId': 15,
      'question': 'C·ªông ƒë·ªìng d√¢n c∆∞ c√≥ vai tr√≤ g√¨ trong b·∫£o v·ªá r·ª´ng?',
      'options': 'Kh√¥ng c√≥|||Tu·∫ßn tra, b√°o c√°o, h∆∞·ªüng l·ª£i t·ª´ r·ª´ng|||Ph√° r·ª´ng|||Kh√¥ng quan t√¢m',
      'correctAnswer': 1,
      'explanation': 'C·ªông ƒë·ªìng ƒë·ªãa ph∆∞∆°ng tu·∫ßn tra, b·∫£o v·ªá r·ª´ng, ƒë∆∞·ª£c h∆∞·ªüng l·ª£i t·ª´ l√¢m s·∫£n b·ªÅn v·ªØng.',
    });

    await db.insert('questions', {
      'lessonId': 15,
      'question': 'T√°i sinh r·ª´ng t·ª± nhi√™n c√≥ l·ª£i g√¨?',
      'options': 'Kh√¥ng c√≥|||Chi ph√≠ th·∫•p, ƒëa d·∫°ng cao|||Ch·∫≠m h∆°n|||Kh√¥ng hi·ªáu qu·∫£',
      'correctAnswer': 1,
      'explanation': 'T√°i sinh t·ª± nhi√™n chi ph√≠ th·∫•p, r·ª´ng ƒëa d·∫°ng v√† b·ªÅn v·ªØng h∆°n so v·ªõi tr·ªìng m·ªõi.',
    });

    // Seed Challenges
    final challenges = [
      {
        'title': 'Kh√¥ng d√πng ·ªëng h√∫t nh·ª±a',
        'description': 'T·ª´ ch·ªëi ·ªëng h√∫t nh·ª±a khi mua ƒë·ªì u·ªëng trong 1 ng√†y',
        'points': 10,
        'icon': 'ü•§',
        'isCompleted': 0,
      },
      {
        'title': 'T·∫Øt ƒëi·ªán khi ra kh·ªèi ph√≤ng',
        'description': 'Lu√¥n nh·ªõ t·∫Øt ƒë√®n v√† thi·∫øt b·ªã ƒëi·ªán khi r·ªùi kh·ªèi ph√≤ng',
        'points': 5,
        'icon': 'üí°',
        'isCompleted': 0,
      },
      {
        'title': 'Mang chai n∆∞·ªõc c√° nh√¢n',
        'description': 'S·ª≠ d·ª•ng chai n∆∞·ªõc c√° nh√¢n thay v√¨ mua chai nh·ª±a',
        'points': 10,
        'icon': 'üç∂',
        'isCompleted': 0,
      },
      {
        'title': 'ƒêi xe ƒë·∫°p ho·∫∑c ƒëi b·ªô',
        'description': 'ƒêi xe ƒë·∫°p ho·∫∑c ƒëi b·ªô thay v√¨ xe m√°y cho qu√£ng ƒë∆∞·ªùng ng·∫Øn',
        'points': 15,
        'icon': 'üö≤',
        'isCompleted': 0,
      },
      {
        'title': 'Ph√¢n lo·∫°i r√°c t·∫°i nh√†',
        'description': 'Ph√¢n lo·∫°i r√°c h·ªØu c∆°, t√°i ch·∫ø v√† r√°c th·∫£i',
        'points': 20,
        'icon': '‚ôªÔ∏è',
        'isCompleted': 0,
      },
      {
        'title': 'Tr·ªìng m·ªôt c√¢y xanh',
        'description': 'Tr·ªìng v√† chƒÉm s√≥c m·ªôt c√¢y xanh',
        'points': 25,
        'icon': 'üå±',
        'isCompleted': 0,
      },
      {
        'title': 'T·∫Øm n∆∞·ªõc nhanh (5 ph√∫t)',
        'description': 'Ti·∫øt ki·ªám n∆∞·ªõc b·∫±ng c√°ch t·∫Øm nhanh d∆∞·ªõi 5 ph√∫t',
        'points': 10,
        'icon': 'üöø',
        'isCompleted': 0,
      },
      {
        'title': 'Mang t√∫i v·∫£i ƒëi ch·ª£',
        'description': 'S·ª≠ d·ª•ng t√∫i v·∫£i thay v√¨ t√∫i nilon khi ƒëi mua s·∫Øm',
        'points': 10,
        'icon': 'üõçÔ∏è',
        'isCompleted': 0,
      },
      {
        'title': 'Tham gia d·ªçn r√°c',
        'description': 'Tham gia chi·∫øn d·ªãch d·ªçn r√°c ·ªü c√¥ng vi√™n ho·∫∑c b√£i bi·ªÉn',
        'points': 30,
        'icon': 'üßπ',
        'isCompleted': 0,
      },
      {
        'title': 'S·ª≠ d·ª•ng giao th√¥ng c√¥ng c·ªông',
        'description': 'ƒêi xe bu√Ωt ho·∫∑c t√†u ƒëi·ªán thay v√¨ xe c√° nh√¢n',
        'points': 15,
        'icon': 'üöå',
        'isCompleted': 0,
      },
    ];

    for (var challenge in challenges) {
      await db.insert('challenges', challenge);
    }
  }

  // CRUD Operations for Lessons
  Future<List<Lesson>> getLessons() async {
    final db = await database;
    final result = await db.query('lessons', orderBy: 'orderIndex ASC');
    return result.map((map) => Lesson.fromMap(map)).toList();
  }

  Future<List<Lesson>> getLessonsByCategory(String category) async {
    final db = await database;
    final result = await db.query(
      'lessons',
      where: 'category = ?',
      whereArgs: [category],
      orderBy: 'orderIndex ASC',
    );
    return result.map((map) => Lesson.fromMap(map)).toList();
  }

  Future<Lesson?> getLesson(int id) async {
    final db = await database;
    final maps = await db.query(
      'lessons',
      where: 'id = ?',
      whereArgs: [id],
    );

    if (maps.isNotEmpty) {
      return Lesson.fromMap(maps.first);
    }
    return null;
  }

  // CRUD Operations for Questions
  Future<List<Question>> getQuestionsByLesson(int lessonId) async {
    final db = await database;
    final result = await db.query(
      'questions',
      where: 'lessonId = ?',
      whereArgs: [lessonId],
    );
    return result.map((map) => Question.fromMap(map)).toList();
  }

  // Get random questions by category (for quiz)
  Future<List<Question>> getQuestionsByCategory(String category, {int limit = 10}) async {
    final db = await database;
    
    // Get all lessons of this category
    final lessons = await db.query(
      'lessons',
      where: 'category = ?',
      whereArgs: [category],
    );
    
    if (lessons.isEmpty) return [];
    
    // Get lesson IDs
    final lessonIds = lessons.map((l) => l['id'] as int).toList();
    
    // Get all questions from these lessons
    final placeholders = lessonIds.map((_) => '?').join(',');
    final result = await db.query(
      'questions',
      where: 'lessonId IN ($placeholders)',
      whereArgs: lessonIds,
      orderBy: 'RANDOM()',
      limit: limit,
    );
    
    return result.map((map) => Question.fromMap(map)).toList();
  }

  // Get all unique categories with count
  Future<List<Map<String, dynamic>>> getCategories() async {
    final db = await database;
    
    final result = await db.rawQuery('''
      SELECT 
        l.category,
        COUNT(DISTINCT l.id) as lessonCount,
        COUNT(q.id) as questionCount
      FROM lessons l
      LEFT JOIN questions q ON l.id = q.lessonId
      GROUP BY l.category
      ORDER BY l.orderIndex
    ''');
    
    return result;
  }

  // CRUD Operations for Challenges
  Future<List<Challenge>> getChallenges() async {
    final db = await database;
    final result = await db.query('challenges');
    return result.map((map) => Challenge.fromMap(map)).toList();
  }

  Future<int> updateChallenge(Challenge challenge) async {
    final db = await database;
    return await db.update(
      'challenges',
      challenge.toMap(),
      where: 'id = ?',
      whereArgs: [challenge.id],
    );
  }

  // CRUD Operations for Progress
  Future<int> insertProgress(Progress progress) async {
    final db = await database;
    return await db.insert('progress', progress.toMap());
  }

  Future<List<Progress>> getProgress() async {
    final db = await database;
    final result = await db.query('progress', orderBy: 'completedAt DESC');
    return result.map((map) => Progress.fromMap(map)).toList();
  }

  Future<int> getTotalPoints() async {
    final db = await database;
    
    // Points from lessons
    final progressResult = await db.rawQuery('SELECT SUM(score) as total FROM progress');
    final progressPoints = progressResult.first['total'] as int? ?? 0;
    
    // Points from completed challenges
    final challengeResult = await db.rawQuery('SELECT SUM(points) as total FROM challenges WHERE isCompleted = 1');
    final challengePoints = challengeResult.first['total'] as int? ?? 0;
    
    // Points from games
    final gameResult = await db.rawQuery('SELECT SUM(score) as total FROM game_scores');
    final gamePoints = gameResult.first['total'] as int? ?? 0;
    
    return progressPoints + challengePoints + gamePoints;
  }

  Future<int> getCompletedLessonsCount() async {
    final db = await database;
    final result = await db.rawQuery('SELECT COUNT(DISTINCT lessonId) as count FROM progress');
    return result.first['count'] as int? ?? 0;
  }

  Future<int> getCompletedChallengesCount() async {
    final db = await database;
    final result = await db.rawQuery('SELECT COUNT(*) as count FROM challenges WHERE isCompleted = 1');
    return result.first['count'] as int? ?? 0;
  }

  // CRUD Operations for Game Scores
  Future<int> insertGameScore(GameScore score) async {
    final db = await database;
    return await db.insert('game_scores', score.toMap());
  }

  Future<List<GameScore>> getGameScores(String gameName) async {
    final db = await database;
    final result = await db.query(
      'game_scores',
      where: 'gameName = ?',
      whereArgs: [gameName],
      orderBy: 'score DESC',
      limit: 10,
    );
    return result.map((map) => GameScore.fromMap(map)).toList();
  }

  Future<int?> getHighScore(String gameName) async {
    final db = await database;
    final result = await db.rawQuery(
      'SELECT MAX(score) as highScore FROM game_scores WHERE gameName = ?',
      [gameName],
    );
    return result.first['highScore'] as int?;
  }

  Future<void> close() async {
    final db = await database;
    await db.close();
  }
}
